title,text
Как библиотека управления состоянием GetX работает во Flutter   ,"Знаете ли вы, как работает библиотека управления состоянием GetX во Flutter? Здесь мы поделимся полным руководством по управлению состоянием GetX с преимуществами, недостатками и примерами кодирования.,GetX — это новейшая ,, популярная благодаря своей простоте, гибкости, производительности и простоте использования. Использование подхода к программированию на основе реагирования обеспечивает простую платформу для разработки динамических и отзывчивых пользовательских интерфейсов.,Как библиотека управления состоянием GetX работает во Flutter,Давайте создадим простое приложение-счетчик, используя GetX, чтобы продемонстрировать эти концепции:,GetX позволяет вам с легкостью создавать динамичные и отзывчивые приложения Flutter. Интуитивный подход и богатые возможности делают его отличным выбором для разработчиков всех уровней.,Следуя этому руководству и дополнительно изучая его возможности, вы раскроете весь потенциал GetX и упростите свой путь разработки Flutter.,Готовы вывести разработку Flutter на новый уровень? Погрузитесь в мир GetX и ощутите всю мощь эффективного управления состоянием!,Если вам нужна помощь экспертов Flutter, свяжитесь с CodeTrade, ведущей компанией по ,, и наймите ,, которые помогут вам воплотить ваш проект в реальность."
Хакеры определяют текущие направления в области кибербезопасности,"За последние несколько лет 70% компаний столкнулись с кибератаками, начиная от вирусных инфекций и заканчивая шифрованием информации. Почему мы не можем полностью предотвратить эти атаки? Хакеры непрерывно отслеживают новейшие технологии и находят новые способы проникновения. Кирилл Шипулин из Positive Technologies исследует методы борьбы с киберугрозами и снижения их воздействия.,96% компаний уязвимы для взлома, что подтверждается аналитикой и статистикой этичных хакеров. Успешность атак зависит от уровня защиты компаний и компетентности персонала. В 2023 году произошли публичные атаки на IT-интегратора и банковского оператора в России. Кибератаки могут иметь серьезные последствия, такие как утечка данных или простой производства.,Хакеры постоянно адаптируются к новым методам защиты. Например, использование мессенджера Telegram для передачи украденных данных стало распространенным в 2024 году. Хакеры создают поддельные аккаунты от имени руководителей компаний, чтобы получить конфиденциальную информацию.,Тем не менее, традиционные методы атак все еще остаются эффективными. Например, хакеры могут использовать подобранный пароль для доступа к удаленной службе компании и провести длительное время внутри сети, собирая информацию. Важно постоянно обновлять методы защиты и следить за новыми угрозами.,Для предотвращения кибератак необходимо инвестировать в обучение персонала по кибербезопасности, использовать многофакторную аутентификацию, регулярно обновлять программное обеспечение и внедрять механизмы мониторинга сетевой активности. Кроме того, важно проводить регулярные аудиты безопасности и реагировать на инциденты немедленно. Современные технологии, такие как искусственный интеллект и машинное обучение, также могут быть использованы для обнаружения и предотвращения киберугроз.,Безопасность в сфере киберпространства становится все более важной в нашем цифровом мире, и компании должны быть готовы к постоянным вызовам со стороны злоумышленников. Непрерывное обновление систем безопасности и стратегий является ключевым фактором в предотвращении кибератак и защите конфиденциальных данных."
Лучшие интерфейсные и новые библиотеки повторно используемых компонентов для React JS 2024,Лучшие интерфейсные и новые библиотеки повторно используемых компонентов для React JS 2024
Как настроить файлы .env в Django,"Многие ресурсы могут быть неясны при объяснении того, как настроить переменные среды в Django с помощью файлов ,. Вот простое руководство:"
Как запускать Cron Jobs в Node.js?,"Вы уже читали руководства по многим типам приложений, которые можно построить с помощью Node.js, но задумывались ли вы, как мы создаем такие проекты, как планировщики задач, автоматические рассылки, планировщики сообщений и т.д., которые требуют, чтобы какая-то система выполняла задачи по определенному расписанию?,Ну, мы можем сделать всё это, запустив , в Node.js. В этом уроке мы расскажем все о cron jobs, что это такое и как их реализовать в Node.js, а затем создадим планировщик задач с их помощью. Давайте начнём!,Термин «cron jobs» первоначально произошёл от операционной системы Unix. Cron — это планировщик заданий на основе времени в операционных системах на базе — Unix, таких как Linux, macOS и т.д., для периодического выполнения заданий в определенные даты и время.,Сегодня в этой статье мы будем использовать npm , для стимулирования этой функции cron job — планирования задач и запуска в определенное время. Давайте начнем с понимания этого модуля и метода, необходимого для нашей задачи., - это сторонний модуль, который можно установить в Node.js с помощью NPM. Все, что вам нужно сделать, это выполнить в папке проекта команду ,. Этот модуль считается планировщиком задач, написанным на JavaScript на основе GNU crontab, и с его помощью мы можем добиться того же, что делает cron job в операционной системе на базе Unix. ,Вы можете запутаться, увидев аргумент, передаваемый этому методу, но все очень просто.,Выражение аргумента состоит из шести полей, представляющих секунду (необязательно), минуту, час, день месяца, месяц и день недели, в таком порядке. Мы можем передавать пользовательские значения или использовать звездочку (*) в качестве подстановочного знака.,В приведенном выше синтаксисе мы использовали только звездочки, это означает, что задача или функция обратного вызова, которую мы передали в качестве аргумента этому методу, будет выполняться каждую минуту, каждый час, каждый день месяца, каждый месяц и каждый день недели.,Предположим, вы хотите отправить сообщение кому-то особенному в его день рождения, 29 сентября, в полночь 12 часов, вы можете легко сделать это, используя приведенный код.,Здесь мы не определяли , в позиции дня недели, поскольку уже задали день месяца (29) и месяц (9).,Теперь, когда мы узнали всё о cron jobs и ,, пришло время создать полноценное приложение для их реализации. Для этого мы будем использовать JavaScript и Node.js., Создайте папку проекта, затем создайте файл , для написания кода Node.js, а затем откройте папку проекта в редакторе кода., Откройте терминал и выполните приведенную ниже команду для установки , и ,.,Модуль , используется для чтения ввода из командной строки и печати вывода. Мы будем использовать его для получения данных о времени напоминания от пользователей., Внутри файла , напишите следующий код.,Здесь мы сначала импортировали модули , и ,, затем создали интерфейс , для ввода и вывода данных с помощью метода ,.,Затем мы использовали метод ,, чтобы попросить пользователя ввести данные, на основе которых будет создано выражение аргумента и передано в нашу главную функцию , для установки напоминания, после чего мы закрыли интерфейс , и вывели сообщение об успехе в консоль., Запустите приложение, выполнив приведенную ниже команду.,Введите необходимую информацию, чтобы установить напоминание. Для тестирования я устанавливаю его на следующую минуту.,Напоминание автоматически появится на консоли в указанное время.,Короче говоря, можно запускать cron jobs в Node.js с помощью функции , модуля npm , для установки задач, которые запускаются в определенное время. Эта функция принимает выражение-аргумент, содержащее пять обязательных полей: минуту, час, день месяца, месяц и день недели для установки напоминаний, а также звездочки (*) в качестве подстановочного знака, если какое-либо поле передавать необязательно.,Мы надеемся, что вы получили удовольствие от чтения этого материала!"
Как оптимизировать базу данных — принципы оптимизации и лучшие практики,"Базы данных — неотъемлемый компонент при создании приложений, будь то веб-, настольные или мобильные. Они символически служат митохондриями приложения, поскольку их основная функция - управление данными.,Управление базами данных — важнейший навык, которым должен обладать разработчик для создания масштабируемых приложений с высоким уровнем эффективности. При неправильном подходе это может привести к потере данных и неправильному управлению со стороны разработчика базы данных.,Следовательно, базы данных должны быть структурированы и построены с учетом потребностей пользователей и с использованием лучших практик.,Цель этой статьи — осветить общие принципы лучших практик работы с базами данных, а также объяснить каждую особенность. Но прежде чем мы обсудим это в деталях, давайте рассмотрим, что представляют собой транзакции баз данных.,Транзакции базы данных — это просто группы операций, которые можно назвать единицей рабочего процесса, выполняемого над базой данных в системе управления базами данных.,Они включают в себя как базовые операции, такие как операции CRUD, так и более сложные операции, такие как индексирование, кэширование и нормализация базы данных.,При таком большом количестве пользователей, выполняющих множество транзакций одновременно, важно убедиться, что база данных поддерживает параллелизм, чтобы предотвратить вмешательство в данные двух или более пользователей, обращающихся к одному и тому же ресурсу.,Отсюда возникает необходимость в принципе ACID.  Что же представляет собой ACID?,Далее мы подробно рассмотрим каждый пункт. Первым в нашем списке стоит атомарность.,Что подразумевает атомарность базы данных? Атомарность базы данных означает, что операция базы данных не может быть разбита на части. Это означает, что операции или транзакции базы данных выполняются полностью, и если в процессе выполнения возникает какая-либо ошибка, вся операция полностью отменяется, не оставляя места для выполнения частичных операций.,Если база данных не является атомарной, это может привести к предоставлению недостоверных неполных данных и в конечном итоге к хаосу всей системы. Как база данных обеспечивает атомарность? Для этого она создает копию существующей базы данных перед выполнением операции, а затем инициирует операцию аварийного восстановления и резервного копирования в случае сбоя операции.,Важно также отметить, что другие принципы баз данных, такие как согласованность и долговечность, опираются на необходимость атомарности базы данных, чтобы быть действительно выполненными.,Обсудив это, перейдем к принципу согласованности базы данных.,Этот принцип подразумевает наличие в базе данных определенных ограничений, каскадов, триггеров и других требований, которые должны выполняться при внесении изменений в существующую базу данных. Невыполнение этих требований приводит к ошибкам согласованности, возвращая базу данных в прежнее стабильное состояние.,Кроме того, принцип согласованности гарантирует, что данные, обновленные пользователем, будут доступны как последняя версия данных в базе данных всем пользователям, желающим читать эту базу данных. Наличие этого принципа исключает возникновение несоответствий и способствует более быстрому поиску информации.,Понимание того, что значит для базы данных быть последовательной, предполагает, что операция, выполняемая с базой данных, проходит проверку целостности перед успешным выполнением. Разобравшись с этим, давайте обсудим принцип изоляции базы данных.,Зачем нужно изолировать базу данных и как сделать одну операцию с базой данных независимой от других операций с базой данных?,Изоляция необходима в системе управления базами данных, чтобы гарантировать, что доступ пользователя к информации в базе данных не будет нарушен другими одновременными транзакциями, выполняемыми другими пользователями в базе данных. Для обеспечения этого использование уровней изоляции в каждой операции с базой данных помогает сохранить целостность информации.,Чтобы эффективно гарантировать целостность базы данных, необходимо использовать определенные уровни изоляции базы данных. Вот некоторые из уровней изоляции, расположенные в иерархическом порядке:,Уровень изоляции базы данных read uncommitted позволяет другим пользователям иметь доступ к чтению текущих транзакций базы данных, которые еще не были полностью или успешно выполнены. Это позволяет получить доступ к чтению того, что называют грязным чтением, что является одной из несогласованностей данных, которые можно увидеть. Этот уровень изоляции данных не рекомендуется.,Этот уровень изоляции базы данных запрещает другим пользователям читать или иметь доступ к транзакции базы данных, которая еще не была зафиксирована. Таким образом, она не позволяет другим пользователям видеть, обновлять или перезаписывать её до тех пор, пока она не будет полностью выполнена.,Этот уровень изоляции изолирует транзакцию исключительно от других транзакций, происходящих параллельно, не позволяя другим пользователям читать и обновлять транзакции.,Это самый высокий уровень изоляции данных, который называют самым строгим. Он изолирует несколько транзакций, выполняемых одновременно, и выполняет их эффективно, поскольку они выполняются последовательно. Он также предотвращает несоответствия в базе данных.,Без этих уровней могут возникнуть такие казусы с непоследовательной базой данных, как грязное чтение, неповторяющееся чтение, фантомное чтение и многие другие. На этом перейдем к последнему пункту о долговечности базы данных и обсудим его подробно.,Что означает, когда мы называем базу данных долговечной, и как обеспечить долговечность базы данных? Долговечность - это принцип, который обеспечивает высокий уровень устойчивости баз данных.,Независимо от любых неблагоприятных последствий, с которыми может столкнуться система управления базой данных, таких как сбои и аварии, не должно быть никакой потери информации в базе данных.,Как базы данных пытаются достичь этого? Перед выполнением любой новой операции база данных создает журнал транзакций, который содержит записанные данные. В случае любого из этих неблагоприятных событий журнал транзакций служит в качестве резервного хранилища, гарантируя, что информация в базе данных сохранится до момента, предшествующего выполнению операции, и тем самым защищая от утечки и потери данных.,Мы также расскажем о других полезных передовых методах работы с базами данных, которые также могут быть применены.,Принцип BASE, который больше подходит для баз данных NoSQL, таких как MongoDB, Redis, Cassandra и так далее. Он предполагает, что база данных должна:,Это означает, что база данных отдает приоритет доступности операций базы данных, а не согласованности и параллельности. Это вполне применимо к распределенным системам, для эффективного функционирования которых требуется высокий уровень эффективности.,Это обеспечивает гибкость базы данных, позволяя масштабировать ее размер, выполнять операции и увеличивать параллелизм для оптимальной производительности базы данных в любое время. Это позволяет поддерживать отказоустойчивость данных.,Это означает, что независимо от того, как транзакции выполняются в последовательности, в конечном итоге достигается эффективная согласованность. Это достигается путем разрешения конфликтов и согласования. В итоге это способствует созданию устойчивой системы данных.,На этом мы подошли к концу урока. Мы надеемся, что вы узнали много нового об оптимизации операций с базами данных и их эффективности с использованием принципа ACID и других лучших практик.,Не стесняйтесь оставлять комментарии и вопросы в поле ниже, а также ознакомьтесь с другими моими статьями здесь. До следующего раза, продолжайте кодить!"
Печать музыки с помощью CSS Grid,"Слишком часто я был свидетелем того, как музыкант-импровизатор с потными руками пытался масштабировать PDF-файл формата А4 на крошечном экране мобильного телефона в разгар концерта. Нам нужен плавный и отзывчивый рендеринг музыки для Интернета!,Нотная запись должна быть такой же доступной и гибкой, как и текст в Интернете; то, что это еще не так, является чем-то вроде оскорбления для моих чувств. Давайте решим эту насущную проблему.,Несколько лет назад я создал прототип музыкального рендерера ,, который выводит , из ,. Первоначальной целью было создание адаптивного музыкального рендерера. Это была хорошая демонстрация, но для прогресса мне пришлось написать сложный механизм многопроходной компоновки, да и другие вещи мешали.,Вскоре после этого я был занят внедрением Grid в наши проекты в ,, когда что-то в нем показалось мне знакомым, и я задался вопросом, не может ли это быть ответом на некоторые проблемы с макетом, которые я решал в Scribe.,Музыкальный нотоносец выполнен в виде сетки. Высота тона отображается вверх по вертикальной оси, а время течет слева направо по горизонтальной оси. Я собираюсь определить эти две оси в двух отдельных классах. Вертикальная ось, определяющая строки сетки, будет называться ,. Чуть позже мы доберемся до оси времени.,Файл , имеет строки сетки фиксированного размера, названные стандартными именами высоты тона, и фоновое изображение, на котором нарисован нотоносец. Итак, для нотного стана скрипичного ключа карта строк может выглядеть так:,Что применительно к , дает нам:,Хорошо. На что-то нечего смотреть, но, осмотрев его, мы видим, что каждая линия и каждое пространство на нотоносце теперь имеют свою собственную линию сетки с названием высоты тона для идентификации каждой строки:,Любой ряд нотного стана может содержать любую из нескольких нот. Например, все ноты ,, , и , должны находиться на линии нотного стана ,.,Чтобы разместить элементы ,, представляющие эти высоты тона, в их правильных строках, я собираюсь поместить имена питчей в атрибуты тона данных и использовать CSS для сопоставления значений тона данных со строками нотоносцев.,Это правило фиксирует высоту звука, начинающуюся с , и заканчивающуюся на ,, поэтому оно назначает высоты звука ,, , и , (а также двойной бемоль , и двойной диез ,) в строку ,. Это необходимо сделать для каждого нотоносного ряда:,Этого должно быть достаточно, чтобы начать размещать символы на нотном стане! У меня есть несколько SVG-символов, подготовленных для прототипа ,, поэтому давайте попробуем разместить парочку на нотоносце:,Это выглядит многообещающе. В следующий раз.,С ритмом, пожалуй, немного сложнее справиться. Не существует одного очевидного наименьшего ритмического разделения, которое можно было бы принять, которое поддерживало бы все виды ритмов. Необходимо принять решение о том, какую минимальную длину нот и какие перекрестные ритмы поддерживать внутри сетки.,Подход с 24 столбцами на долю поддерживает разделение долей для равномерного расположения восьмых нот (12 столбцов), шестнадцатых нот (6 столбцов), 32-х нот (3 столбца), а также значений триолей этих нот. Это хорошая отправная точка.,Вот полоса из 4 долей, определяемая как 4 × 24 = 96 столбцов сетки, плюс столбец в начале и один в конце:,Добавьте пару тактовых линий в качестве содержимого , и , и поместите туда символ ключа по центру нотоносца с ,, и мы получим:,Посмотрите на это, и мы увидим, что ключ попал в первый столбец, и имеется , столбцов нулевой ширины, по , на долю, каждый из которых разделен небольшим промежутком между столбцами:,На этот раз я собираюсь использовать атрибуты , для назначения такта элементам и правила CSS для сопоставления тактов столбцам сетки. Карта CSS выглядит следующим образом с правилом для каждой , доли:,Атрибут , селектор начинается с делает правило устойчивым к ошибкам. В какой-то момент неокругленные числа или числа с плавающей запятой неизбежно будут преобразованы в бит данных. Двух десятичных знаков достаточно, чтобы определить столбец сетки с размером , доли.,Объединив это с нашим классом нотоносцев, мы сможем позиционировать символы по доле и высоте, установив , на долю от , до ,, а , на название ноты. При этом столбцы долей, содержащие эти символы, увеличиваются, чтобы вместить их:,Ооо. Стебли?,Ага. Решка?,Ага. Расстояние между хвостами можно улучшить (что должно быть достигнуто с запасом), но позиционирование работает.,Соберите целую кучу подобных тактов вместе в контейнере ,, который обертывается, и мы начинаем видеть отзывчивую музыку:,Здесь явно не хватает множества вещей, но это отличная база для начала. Он уже обертывается более изящно, чем я когда-либо видел в онлайн-рендерерах музыки.,Не обращая внимания на эти лучи, обратите внимание, что ноты, которые встречаются ближе друг к другу по времени, визуализируются немного ближе друг к другу:,Это тонкий, преднамеренный эффект, создаваемый небольшим ,, который служит своего рода временным ,, в который вставляются элементы символов. Сами столбцы имеют нулевую ширину, если в них нет заголовка ноты, но между событиями, которые находятся дальше друг от друга по долям, имеется больше промежутков в столбцах - 24 на долю, и, следовательно, большее расстояние.,Постоянным интервалом можно управлять, регулируя поля символов. Чтобы добиться здесь более постоянного интервала, мы бы уменьшили интервал между столбцами, увеличив при этом поля заголовков примечаний:,Но, это выглядит плохо, потому что расстояние между головами не дает читателю представления о том, насколько быстрый ритм. Дело в том, что CSS дает нам хороший контроль над метриками. И теперь цель состоит в том, чтобы настроить эти показатели для удобства чтения.,Вы можете задаться вопросом, почему я использовал отдельные классы для вертикального и горизонтального интервала, а не только один? Разделение осей означает, что одну можно заменить без другой. Возьмите мелодию:,Чтобы отобразить ту же самую мелодию на басовом ключе, класс , можно заменить классом ,, который сопоставляет те же атрибуты высоты данных с линиями басового нотоносца:,Или, с помощью CSS, который сопоставляет , со , столбцами , в ,, тому же нотному стану может быть присвоен тактовый размер ,:,Очевидно, я умалчиваю некоторые детали. Не все так просто, как смена класса, и некоторые основы и строки книги необходимо изменить.,Вот класс нотного стана, который полностью переназначает высоту звука. , помещает голоса барабанов и перкуссии в группу нот в нижних октавах клавиатуры, но эти ноты не связаны с тем, где барабаны напечатаны на нотоносце. В CSS можно определить класс барабанов-нотоносцев, который сопоставляет эти высоты тона с правильными строками:,Это очень читаемая нотация барабанов. Я очень доволен этим.,CSS Grid позволяет нам выравнивать и другие символы внутри сетки обозначений. Аккорды и тексты песен, динамика и т. д. могут быть выстроены в линию и охватывать синхронизированные события:,Балки, хорды и некоторые более длинные паузы создаются для охвата столбцов путем сопоставления их атрибутов продолжительности данных со значениями пролета в конце столбца сетки:,Просто, ,Наконец, вся система имеет размер ,, поэтому для ее масштабирования мы просто меняем ,:,Это идеальная система? Честно говоря, я просто ошеломлен тем, что это работает так хорошо, но если мы ищем предостережения… ,. CSS не может автоматически размещать новый ключ/ключ в начале каждой переносимой строки или ,. привязывать голову к новой перейдите на новую строку. И ,. угловые балки — это отдельная история; Лучи нот , и , трудно выровнять, потому что мы не можем точно знать, где находятся их основы, пока Сетка не разложит их:,Таким образом, для полного завершения работы потребуется немного привести в порядок JavaScript, но большую часть работы по макетированию здесь берет на себя CSS, а это означает, что в JavaScript нужно выполнить гораздо меньше работы по макетированию.,Если вам нравится эта система CSS или эта запись в блоге, или если вы знаете, как ее улучшить, дайте мне знать. Я зарегистрирован в Bluesky ,, , и в Твиттере (еще почти) ,. Или присоединяйтесь ко мне и сделайте это в репозитории Scribe...,Я написал интерпретатор для этой новой системы CSS и обернул его в элемент ,. Он еще далеко не готов к производству, но, поскольку он уже способен отображать , и нотировать барабаны, я думаю, что это интересно и полезно.,Элемент , отображает нотную запись на основе данных, найденных в его содержимом:,Или из файла, полученного по атрибуту ,, например этого JSON:,Или из объекта JS, установленного в свойстве , элемента.,Базовая документация обо всем этом есть в ,.,Вы можете попробовать текущую сборку разработки, импортировав эти файлы на веб-страницу:,Как я уже сказал, он находится в разработке. Помимо некоторых непосредственных улучшений, которые я могу внести в ,, таких как настройка автоспеллера, исправление лучей , ноты, а также обнаружение и отображение туплетов, я хотел бы изучить некоторые долгосрочные функции:"
Принцип инверсии зависимостей в Go: Что это такое и как это использовать,"В этой статье мы обсудим принцип инверсии зависимостей. Вкратце мы расскажем о том, что это такое, и рассмотрим этот принцип на примере простого Go-приложения.,Принцип инверсии зависимостей (DIP) — это один из пяти принципов SOLID объектно-ориентированного программирования (ООП), впервые представленный Робертом К. Мартином. Он гласит:,Это очень известный принцип в мире проектирования ООП, но если вы никогда с ним не сталкивались, то на первый взгляд он может показаться непонятным, поэтому давайте разберем этот принцип на конкретном примере.,Давайте рассмотрим, как реализация принципа DI может выглядеть в Go. Начнем с простого примера HTTP-приложения с одной конечной точкой/книгой, которая возвращает информацию о книге на основе её ID. Чтобы получить информацию о книге, приложение будет взаимодействовать с внешним HTTP-сервисом., - папка с командами Go. Здесь будет находиться основная функция., - папка с внутренним кодом приложения. Здесь будет находиться весь наш код., просто запускает HTTP-сервер.,Вот код для работы с нашей конечной точкой HTTP:,Как вы можете видеть, в настоящее время весь код находится непосредственно внутри обработчика (за исключением модели книги). В обработчике мы создаем HTTP-клиента и делаем запрос к внешнему сервису. Затем мы назначаем книге определенную цену. Здесь, я думаю, любому разработчику очевидно, что это не лучший дизайн, и код для вызова внешнего сервиса нужно извлечь из обработчика. Давайте сделаем это.,В качестве первого шага давайте перенесем этот код в отдельное место. Для этого мы создадим файл ,, в котором будет находиться логика получения и обработки нашей книги, и ,, в котором мы будем хранить необходимые типы ,.,Код ,Код ,Код нового обработчика,Как видите, код обработчика стал намного чище, но теперь нам гораздо интереснее взглянуть на ,.,UseCase имеет зависимость в виде ,, который мы сейчас никак не инициализируем. Мы могли бы передать , в конструктор , или создать , непосредственно в конструкторе. Однако давайте ещё раз вспомним, что говорит нам принцип DI.,Однако при таком подходе мы сделали как раз наоборот. Наш высокоуровневый модуль, ,, импортирует низкоуровневый модуль, HTTP.,Давайте подумаем, как это можно исправить. Для начала создадим файл ,. Этот файл будет содержать реализацию HTTP-запросов к внешнему сервису и соответствующий интерфейс.,Далее нам нужно обновить наш ,, чтобы он начал использовать интерфейс из пакета ,.,Кажется, что ситуация значительно улучшилась, и мы решили проблему зависимости , от низкоуровневого модуля. Однако это ещё не всё. Давайте сделаем ещё один шаг вперед. Сейчас для объявления зависимостей , использует интерфейс из низкоуровневого модуля. Можно ли это улучшить? Что, если мы объявим необходимые нам интерфейсы в ,?,Таким образом, мы избавимся от явных зависимостей от низкоуровневых модулей. То есть наш высокоуровневый модуль объявит все интерфейсы, необходимые для его работы, и тем самым устранит все зависимости от низкоуровневых модулей. На верхнем уровне приложения , мы реализуем все интерфейсы, необходимые для работы ,.,Также давайте вспомним об экспортируемых и неэкспортируемых типах в Go. Нужно ли нам делать интерфейсы , экспортируемыми? Эти интерфейсы нужны только для указания зависимостей, необходимых данному пакету для работы, поэтому лучше их не экспортировать.,Код usecase.go,Код types.go,Код client.go,Код main.go,В этой статье мы рассмотрели, как реализовать принцип инверсии зависимостей в Go. Реализация этого принципа может помочь предотвратить превращение вашего кода в ""спагетти"" и сделать его более легким для сопровождения и чтения. Понимание зависимостей ваших классов и их правильного объявления может значительно упростить вам жизнь при дальнейшей поддержке вашего приложения.,Спасибо за прочтение! Счастливого кодинга!"
Как создать чат-бота React — пошаговое руководство,"В постоянно развивающейся сфере веб-технологий интеграция чат-ботов на базе искусственного интеллекта станет определяющей тенденцией в 2024 году.,Благодаря быстрому развитию моделей большого языка (LLM), чат-боты стали ключевыми инструментами, используемыми на многих веб-сайтах и ​​сервисах. От ботов для часто задаваемых вопросов до поддержки в чате — они могут предоставить пользователям информацию и помощь.,Если у вас есть веб-сайт, элегантный интерфейс чат-бота может предложить поддержку вашим пользователям. И вы захотите представить современного чат-бота, который сможет увлечь ваших пользователей и произвести впечатление.,React — один из самых популярных инструментов для разработки веб-сайтов, а сайты и приложения на базе React — отличные кандидаты на роль чат-ботов. В этом кратком руководстве вы увидите, насколько легко можно интегрировать чат-бота на ваш веб-сайт React.,Прежде чем мы начнем настраивать нашего чат-бота, обратите внимание, что это руководство предполагает знание следующего:,Базового понимания вышеизложенного достаточно, и вы сможете создать свой собственный проект React. Если вы совершенно не знакомы с вышеизложенным, вы можете сначала просмотреть связанные с ними руководства (а также любые другие полезные ресурсы, которые вы найдете). В противном случае, начнем!,Прежде чем мы сможем настроить нашего чат-бота, давайте создадим новый пустой проект React. Перейдите в папку проекта по вашему выбору и выполните следующие команды в своем терминале:,Вам будет предложено ввести имя проекта, структуру и вариант. Для целей этого урока мы выберем следующие варианты:,После завершения настройки зайдите в папку проекта и выполните следующие команды:,Если вы зайдете на http://localhost:5173 в своем браузере, вас встретит следующий экран:,Теперь, когда у нас есть настройка проекта, пришло время установить React ChatBotify. , — это библиотека React с широкими возможностями настройки, которая упрощает процесс интеграции чат-бота в ваше приложение. Мы будем использовать его для включения чат-бота, поэтому установите его с помощью команды ниже:,После завершения установки мы можем приступить к импорту библиотеки и ее рендерингу. В папке , откройте файл , в любом редакторе по вашему выбору. Файл по умолчанию должен выглядеть примерно так:,Далее, добавив всего две строки кода, мы увидим чат-бота, отображаемого в нашем приложении. Вверху вашего файла добавьте строку:,Над элементом , в операторе , добавьте следующую строку:,Ваш отредактированный файл должен выглядеть так:,Попробуйте запустить приложение еще раз, и в правом нижнем углу вас встретит чат-бот, как показано на снимке экрана ниже:,Довольно аккуратно, не так ли?,Приятно иметь простую настройку чат-бота, но нехорошо иметь только приветственное сообщение по умолчанию. Давайте быстро добавим собственное сообщение ,.,Компонент , использует свойство , для определения разговоров. По умолчанию точка входа в диалог всегда называется , блоком, как показано в примере ниже:,Мы продолжим и передадим приведенный выше поток в нашего чат-бота:,Когда вы снова посмотрите на свое приложение, вы заметите, что сообщение по умолчанию исчезло и заменено на ,. вместо. Не слишком сложно, не так ли?,В этом руководстве вы увидели, насколько легко настроить современного чат-бота React.,Хотя приведенный выше пример прост, в потоке есть множество других свойств, которые могут помочь вам построить разговор. Они задокументированы на ,, где также представлены примеры живых ,, которые вы можете изучить и узнать больше."
Власти тестируют программное обеспечение для сдачи ЕГЭ на российских операционных системах,"Рособрнадзор, совместно с Федеральным центром тестирования (ФЦТ) и разработчиками отечественных операционных систем на основе Linux, начали тестировать программное обеспечение для сдачи единого государственного экзамена (ЕГЭ), адаптированное под российские операционные системы. ,Согласно информации от одного из разработчиков ПО, в текущем году тестовые экзамены на отечественном программном обеспечении проходят в нескольких регионах, таких как Ленинградская, Мурманская и Владимирская области, Коми, Мордовия и Севастополь. Основной этап ЕГЭ запланирован на период с 23 мая по 1 июля.,Представители ФЦТ подтвердили, что в некоторых пунктах проведения экзамена будет возможность сдать экзамен по математике на российской операционной системе, основанной на Linux. Они также сообщили о планах доработать программное обеспечение к 2025 году для проведения экзаменов по информатике и иностранным языкам на рабочих местах с операционными системами отечественной разработки. Финансирование этих работ будет осуществляться из федерального бюджета, хотя точный объем финансирования в ФЦТ не был уточнен.,В Рособрнадзоре также отметили, что начиная с 2023 года ведется работа по адаптации программного обеспечения для проведения ЕГЭ с использованием российских операционных систем. Была выполнена значительная работа с регионами Российской Федерации по сбору информации, включая данные об операционных системах, используемых в образовательных учреждениях. Ранее ведомство заявляло о выборе компаний «Группа ""Астра""», «Базальт СПО», «Ред Софт» и НТЦ РОСА для замещения импортных операционных систем в школах.,Согласно информации от инсайдера рынка, до настоящего времени программное обеспечение для сдачи экзаменов было доступно только для Windows. Власти планировали адаптировать программу для сдачи ЕГЭ под российские решения уже в 2021 году, как сообщал глава Минцифры Максут Шадаев. Он отмечал, что у школ недостаточно средств для лицензирования Windows, а также указывал на ограничения при использовании этой операционной системы в рамках государственных и муниципальных заказов."
Реализация бесконечной прокрутки в Next.js с помощью действий сервера,"— это распространенная стратегия на платформах с большим количеством контента, которая отдает приоритет разбиению на страницы при разработке API. Эта стратегия загружает большие наборы данных постепенно небольшими управляемыми фрагментами, улучшая UX, особенно для медленных интернет-соединений.,Раньше для интеграции таких функций, как бесконечная прокрутка, в Next.js требовались внешние библиотеки, такие как SWR или Tanstack Query (ранее React Query).,Однако в более новых версиях Next.js, в частности Next.js 13 и более поздних версиях, действия сервера позволяют нам получать исходные данные непосредственно на сервере. Это повышает воспринимаемую производительность за счет немедленного рендеринга контента без внешних зависимостей.,В этом посте мы рассмотрим, как реализовать бесконечную прокрутку с помощью действий сервера Next.js, включая первоначальную выборку данных на стороне сервера и постраничный поиск данных на стороне клиента. В этой статье мы не будем углубляться в CSS, но отметим, что , использует Tailwind CSS.,Начнем с настройки нашего приложения Next.js. Я использую , с помощью pnpm, но вы можете выбрать другой метод и ,, если хотите:,После запуска этой команды вы должны увидеть что-то вроде следующего:,Если вы используете ту же настройку приложения, что и моя, просто запустите ,, чтобы запустить приложение в режиме разработки. Это создаст базовый стартовый пользовательский интерфейс Next.js.,Поскольку , теперь является стандартным подходом, я решил использовать его с этим приложением. Я также сохраняю традиционный каталог src, хотя вам, возможно, не обязательно это делать. Ниже приведен обзор структуры проекта:,Я добавил несколько подкаталогов в каталог , — например, ,, , и , — для эффективной организации различных типов данных. Мы углубимся в эту структуру позже в этой статье.,Для реализации загрузки данных мы будем использовать фиктивный REST API под названием ,, который предлагает различные типы фиктивных данных для целей разработки и тестирования. Используя этот сервис, мы получим несколько фиктивных сообщений в блоге. Структура URL-адресов, предоставляемая этим API, выглядит следующим образом:,При запросе этого URL-адреса вы получите примерно следующий ответ:,Каждый наш пост будет содержать четыре поля. Важно заранее настроить модель данных типа для наших данных публикации, чтобы мы могли легко использовать ее в остальной части приложения. Управление этими типами в отдельной папке типов — хороший способ систематизировать вещи:,Основываясь на структуре URL-адреса нашего API, мы можем захотеть настроить его для повторного использования, чтобы мы могли легко использовать его при необходимости.,Чтобы обеспечить безопасность и организацию конкретных данных, таких как ключи API, URL-адреса, аргументы запроса и другая информация, связанная с API, крайне важно хранить их в переменных среды. Однако, поскольку в этом посте используется открытый API без конфиденциальных данных, мы будем управлять нашими постоянными значениями в отдельном файле TypeScript:,В приведенном выше файле мы определили отдельные переменные для URL-адреса API и количества сообщений на странице, которые мы будем использовать неоднократно позже.,Теперь мы создадим папку ,, чтобы определить служебную функцию для создания URL-адреса API с двумя параметрами запроса: , и ,:,Хорошей идеей также было бы создание вспомогательной функции ошибок для чтения различных кодов ответов и вывода более качественных сообщений об ошибках в консоль. Мы будем использовать ,и выводить разные сообщения для разных кодов ответа:,Далее мы создадим и настроим компоненты пользовательского интерфейса для демонстрации полученных данных. Мы создадим два основных шаблона: ,, который будет отвечать за отображение отдельных списков сообщений, и ,, содержащий несколько компонентов ,.,Компонент , прост и может использовать все четыре параметра, предлагаемые типом ,. Я использую только заголовок и тело, чтобы упростить задачу. Мы не будем указывать его как компонент, специфичный для клиента, поскольку нам придется использовать его как на клиенте, так и на сервере:,Ниже представлен краткий предварительный просмотр компонента ,. Мы позаботились о его внешнем виде с помощью Tailwind CSS:,Компонент , также не будет слишком сложным. Однако на данный момент это может не иметь особого смысла, поскольку нам нужно будет перебирать полученные данные и предоставлять , соответствующие данные для каждого индекса.,На данный момент давайте создадим его вот так, а оптимизируем позже:,Вышеупомянутый компонент принимает в качестве реквизита массив сообщений, которые можно считать начальными сообщениями, полученными с сервера. Мы будем работать над дальнейшей загрузкой данных в следующих нескольких сегментах.,Компонент , будет выглядеть примерно так, как показано ниже. Мы будем следовать одному и тому же шаблону во всех списках публикаций, которые будем реализовывать:, — это, по сути, специализированная функция, которая позволяет нам выполнять код на стороне сервера в ответ на взаимодействие пользователя на стороне клиента. Эта возможность упрощает такие задачи, как выборка данных, проверка ввода пользователя и другие операции на стороне сервера.,Давайте настроим действие сервера для загрузки наших сообщений на сервер. Мы будем использовать это действие непосредственно для загрузки исходных данных в ,, а затем делегируем постоянную ответственность за загрузку дополнительного контента на стороне клиента компоненту ,, инициируемому определенными событиями:,В этом действии используются две служебные функции, которые мы определили ранее: , и ,. Также обратите внимание, что каждое действие сервера Next.js начинается с директивы «,».,На следующем этапе мы улучшим компонент ,, чтобы он мог загружать данные с помощью только что определенного действия сервера ,.,Теперь мы будем использовать , для управления существующими сообщениями и номерами страниц, полученными с сервера. Используя свойства , и ,, мы установим необходимую логику для загрузки следующего груза сообщений.,Обратите внимание, что нам нужно назначить этот компонент PostList как клиентский компонент для обновлений данных, управляемых пользователем, инициируемых определенными событиями, такими как прокрутка страницы вниз или нажатие кнопки:,В функции , у нас есть три переменные состояния, которые вместе выполняют разные обязанности: смещение, сообщения и ,.,Переменная messages содержит начальные сообщения, которые мы ожидаем получить от сервера в компоненте , при каждой загрузке страницы. Мы добавляем новые данные в этот массив на основе логического значения ,, для которого по умолчанию установлено значение ,.,Допустим, мы используем действие , и получаем пустой ответ. В этом случае мы устанавливаем логическое значение , в значение ,. Это прекратит запросы на загрузку дополнительного контента. В противном случае мы добавляем новые сообщения в переменную ,, а значение , увеличивает текущее значение смещения.,Чтобы функция , работала должным образом, мы должны запускать ее с помощью такого события, как нажатие кнопки или прокрутка вниз. А пока давайте добавим кнопку в компонент ,, которую пользователь сможет нажать, чтобы загрузить больше сообщений. Со временем загрузка по клику будет заменена функцией бесконечной прокрутки.,Наконец, видимость этой кнопки-триггера контролируется логическим значением ,. Вот полученный код:,Последний шаг — интеграция компонента , в файл , в корне каталога приложения.,Как обсуждалось ранее, компоненту , требуется аргумент с именем , для заполнения списка некоторыми исходными данными. Мы получаем эти данные с помощью действия сервера , и загружаем сообщения от , до значения, указанного нами для нашей константы ,:,Вот и все! Теперь мы можем загрузить дополнительные сообщения, нажав кнопку ,. Ниже показано, как реализация будет выглядеть в действии:,, а его применение — в ,. В следующем сегменте мы расширим нашу текущую реализацию, включив в нее бесконечную прокрутку для загрузки данных вместо кнопки «Загрузить еще».,Основная идея реализации бесконечной прокрутки здесь заключается в замене кнопки, реализованной в компоненте ,, элементом триггера прокрутки, например счетчиком или текстом, указывающим загрузку.,Когда этот элемент появляется в окне просмотра, мы запускаем загрузку следующего пакета данных. По сути, именно так работает функция бесконечной прокрутки. Мы можем обнаружить пересечение элемента с помощью API ,.,Мы рассмотрим два метода реализации бесконечной прокрутки. Один из них предполагает использование небольшой зависимости, которая упрощает использование API Intersection Observer в React. Другой метод предполагает непосредственное использование API Intersection Observer, который немного сложнее реализовать в React.,Добавьте пакет , как обычную зависимость:,Давайте создадим копию компонента , и назовем её , или любое другое подходящее имя. Основная функция загрузки , останется неизменной.,Мы будем использовать хук ,, предоставляемый библиотекой ,, который деструктурирует возвращаемые значения в переменные, которые мы предоставили ниже:,Переменная , — это ссылочный объект, который мы прикрепим к элементу, который хотим наблюдать. Между тем, , — это логическое значение, указывающее, виден ли элемент в данный момент в области просмотра.,В компоненте , все происходило синхронно, поэтому нам не пришлось использовать хук ,. Однако, поскольку мы хотим запускать , при асинхронной прокрутке вниз к нашему элементу ,, нам нужно использовать хук , для наблюдения за нашим элементом загрузки:,Теперь, когда элемент загрузки пересекает область просмотра, , будет запускаться с новыми значениями для логических значений , и ,.,Наконец, нам нужно реализовать наш элемент , следующим образом:,Теперь мы можем легко реализовать этот новый компонент в файле ,, заменив компонент ,. Альтернативно мы можем создать новый маршрут и вместо этого использовать этот компонент в его корневом файле ,.,Вот как это будет выглядеть в действии в окне браузера:,Найдите реализацию в , и , в маршрутизаторе приложений.,Вместо использования дополнительной библиотеки давайте воспользуемся API JavaScript Intersection Observer непосредственно в нашем компоненте.,Новый компонент, который мы собираемся создать, похож на ,, который мы настроили в предыдущем разделе. Отличается только часть ,, поскольку именно здесь реализуется API Intersection Observer.,Как обсуждалось в последнем разделе, нам необходимо использовать хук ,, поскольку для реализации функции бесконечной прокрутки будут задействованы некоторые асинхронные задачи.,Поскольку у нас нет встроенной логики ссылок, предлагаемой библиотекой React-Intersection-Observer в предыдущем компоненте, нам нужно установить ссылку для нашего элемента ,, используя хук ,:,Далее в хуке , мы должны проверить, существует ли объект окна, а также доступен ли объект ,:,Хук ,, который мы использовали здесь, опирается исключительно на состояние ,. Это связано с тем, что у нас нет ничего подобного логическому значению ,, как в предыдущем компоненте.,Представленная выше проверка совместимости имеет решающее значение, поскольку оконные и веб-API обычно недоступны на стороне сервера во время первоначального рендеринга, что может привести к ошибкам. Если какой-либо из этих двух параметров окажется неподдерживаемым, хук , завершает работу раньше, чтобы предотвратить ненужные операции.,Если поддерживается, объект окна создает экземпляр IntersectionObserver для отслеживания видимости нашего элемента ,. Функция , срабатывает всякий раз, когда пороговое значение достигает , — другими словами, когда элемент , становится видимым как минимум на , процентов в области просмотра, что указывает на то, что пользователь прокручивает к нему:,В конце мы представили функцию очистки, позволяющую прекратить наблюдение за элементом при размонтировании компонента или изменении зависимости. Это гарантирует, что наблюдатель не будет терять память и обновляет свое поведение в зависимости от текущих условий.,Наконец, либо замените компонент , в файле , в корне приложения, либо создайте отдельный маршрут и реализуйте его в собственном файле ,.,Как показано ниже, это будет выглядеть идентично предыдущей реализации, но без использования дополнительных зависимостей:,Вы можете найти весь связанный , и каталоге ,.,Включение функции бесконечной прокрутки в насыщенный контентом проект Next.js — отличный способ улучшить UX за счет постепенной загрузки больших наборов данных, страница за страницей. В этом уроке мы рассмотрели, как реализовать бесконечную прокрутку с помощью действий сервера Next.js.,Сначала мы начали с загрузки данных по требованию, а затем рассмотрели два разных подхода к реализации бесконечной прокрутки в Next.js. Теперь у вас должно быть четкое представление о загрузке данных с разбивкой на страницы по требованию и настройке реализации бесконечной прокрутки в приложении с большим количеством контента.,Вы можете найти весь код, который мы обсуждали выше, в этом ,. Если у вас есть какие-либо вопросы, не стесняйтесь задавать их в разделе комментариев ниже."
Добавить всплывающее уведомление с помощью Django – простой способ,"Я работал над приложением с функцией планирования, и мне нужна была система всплывающих уведомлений, чтобы информировать пользователей о некоторых сроках. Есть несколько разных способов достижения этой цели.,Если вы используете ,, вы можете использовать его классы всплывающих уведомлений и немного JavaScript.,Итак, давайте откроем новый каталог в нашем любимом редакторе:,Давайте создадим новый , с,Активируйте новый ,. Я на Linux, поэтому:,Установите Джанго:,Создадим наш проект:,Перейдите в новый каталог:,И создайте новое приложение:,Итак, теперь у нас должна быть такая структура:,И если мы запустим наш сервер разработки и перейдем по адресу , в нашем браузере, мы должны увидеть следующее сообщение:,Теперь добавим наше приложение в файл ,:,Хорошо!,Теперь мы можем создавать наши модели. Предположим, нам нужен планировщик для управления обслуживанием оборудования. Итак, нам нужна модель инструментов, и в файле , нашего приложения мы можем создать ее следующим образом:,Вам могут понадобиться другие поля для вашего инструмента (например, изображение или поле, чтобы узнать, где хранится инструмент...), но для наших целей этих полей достаточно.,Теперь давайте создадим модель для обслуживания:,Итак, нам нужно обратить внимание на поле ,, которое даст нам дату нашего тоста.,Давайте перенесем наши модели с помощью:,И у нас должна быть такая структура,Теперь мы можем создать наше представление. Нам нужно отфильтровать нашу модель, чтобы получить только обслуживание со значением ,, превышающим или равным сегодняшней дате. Предположим, что нам нужно просмотреть в наших тостах только обслуживание следующих 30 дней.,Итак, наше мнение может быть таким:,Теперь нам нужно указать путь к нашим шаблонам в файле , в папке тостов. Итак, в файл , мы добавляем каталог шаблонов для нашего приложения:,Хорошо. Теперь в нашем каталоге , создайте новую папку «шаблон»; в этой папке создайте новую папку ,. В этой папке создайте новый файл ,.,Теперь нам нужно создать URL-путь. В файле , в папке тостов мы можем добавить наш путь, но сначала нам нужно импортировать наше представление.,Итак, мы готовы к следующему шагу.,Для шаблона мы можем использовать начальную загрузку по этой ссылке,Скопируйте код из второго шага и вставьте его в файл ,:,Давай попробуем команду,И если вы не получаете никаких ошибок, вы должны найти свою страницу , в браузере.,Создайте несколько экземпляров,Давайте создадим несколько экземпляров. В терминале дайте команду:,А потом:,Теперь мы можем создать экземпляры наших инструментов:,То же самое для экземпляров обслуживания:,Хорошо. Теперь для проверки мы можем поместить наши экземпляры в наш шаблон, добавив следующие строки:,Под строкой «Hello world».,Итак, мы можем видеть только один экземпляр из-за нашего фильтра ,. Наш тост должен показать тот же результат.,Компонент всплывающего уведомления Bootstrap можно найти по этой ссылке.,Вы можете найти разные версии в зависимости от того, что вам нужно, но тост также можно настроить.,Наших тостов может быть несколько, поэтому нам придется положить их в контейнер для тостов. Более того, мы можем перебирать переменные для создания тостов.,У нас может быть много разных потребностей, чтобы показать наши тосты. Если предположить, что они нам нужны, когда мы открываем страницу, то мы можем разместить внизу нашего шаблона очень простой скрипт.,С помощью этого скрипта мы просим показывать наши всплывающие уведомления при загрузке содержимого ,.,Давайте посмотрим на весь наш шаблон:,Это очень простой toast. В моем приложении всплывающие уведомления содержат другую информацию, например URL-ссылку для просмотра нужного инструмента, имя технического специалиста, которому следует позвонить, и так далее.,Например, если вы работаете с React или Vue, вы можете найти другие способы использования всплывающих уведомлений.,Toast могут быть интересным способом показать пользователям некоторую информацию. Это был очень простой способ их использования.,Не стесняйтесь оставить предложение или комментарий.,Спасибо за прочтение!"
От нуля до героя CRUD: создайте свой первый бэкэнд API на JavaScript,"Интерфейс прикладного программирования, также известный как API, ,— это фундаментальная концепция взаимодействия с данными, хранящимися в базе данных. Процесс его создания может занять много времени и быть сложным без надлежащего руководства. Как разработчик, вы должны понимать, как эффективно разрабатывать CRUD (Create, Read, Update, and Delete) API для веб-приложений.,Чтобы разработчик мог создать надежный и гибкий API для приложений, необходимо уметь настраивать маршруты, обрабатывать HTTP-запросы, отправлять HTTP-ответы, подключаться к базе данных MongoDB и реализовывать CRUD-операции, используя возможности Node.js, Express.js и MongoDB.,В этом руководстве вы пройдете пошаговый процесс создания RESTful CRUD API, начиная с настройки среды разработки проекта и заканчивая подключением к базе данных MongoDB, определением модели данных с помощью Mongoose, которая будет взаимодействовать с кластером баз данных MongoDB, реализацией CRUD-функций с помощью маршрутов Express и, наконец, тестированием конечных точек API. Вы также узнаете, как обрабатывать валидации и ошибки. По завершении этого урока вы сможете создавать динамические CRUD API с эффективными и безопасными возможностями управления данными.,Node.js - это кроссплатформенная среда выполнения, которая запускает код JavaScript на сервере, а не в браузере. Node.js помогает создавать масштабируемые и высокопроизводительные приложения.,Express.js - это фреймворк Node.js, предоставляющий надежный набор функций для разработки веб-интерфейсов API. Он интегрируется с Node.js, упрощая создание API.,API будет построен с использованием трехслойной архитектуры на базе Node.js, Express.js и MongoDB., - это место, где мы будем общаться и взаимодействовать с базой данных.,В , мы будем обрабатывать всю бизнес-логику, связанную с HTTP-запросами и ответами нашей конечной точки., будет отправлять URL-адреса соответствующим функциям контроллера. Функциональность маршрутизатора будет получена из Express.,Наша архитектура API для создания CRUD API является прямой, простой и понятной.,С самого начала этой статьи мы слышим термин CRUD API. Давайте рассмотрим его подробнее.,CRUD API - это базовые операции, которые можно выполнять с данными в базе данных, чтобы обеспечить взаимодействие с приложением. Они используются как строительные блоки в веб-разработке для создания приложений, требующих хранения данных и манипулирования ими.,Итак, фраза CRUD означает возможность создавать, читать, обновлять и удалять объекты из базы данных.,: Эта функция позволяет создавать новые объекты в базе данных.,: Эта функция позволяет извлекать существующие данные из базы данных.,: Эта функция позволяет изменять существующие данные, которые уже находятся в базе данных.,: Эта функция позволяет удалить из базы данных существующие данные, которые больше не нужны.,Вам не нужно быть экспертом, чтобы следовать этому руководству, но вам понадобится следующее:,В этом уроке мы будем использовать VSCode, но подойдет любой текстовый редактор. Для начала давайте создадим нашу среду разработки. Мы не будем усложнять настройку, а создадим простую и упорядоченную структуру проекта для нашего RESTful CRUD API. Чтобы было проще, мы разделим следующие разделы на две части:,Набрав следующую команду в командной строке или интерфейсе командной строки, мы можем создать общую структуру проекта, включая все соответствующие папки и файлы.,После выполнения вышеуказанных команд должен появиться файл , и структура проекта приложения. Теперь запустите проект в VSCode с помощью следующей команды.,Теперь, когда вы успешно настроили среду разработки, ваш файл , должен выглядеть так, как показано выше. Далее мы добавим в наш проект дополнительные зависимости для разработки. Для установки откройте терминал и введите следующую команду.,После установки необходимых зависимостей ваш обновленный файл , должен выглядеть следующим образом:,Теперь давайте настроим наш веб-сервер. В файл записи , добавьте следующий код:,Приведенный выше код выполняет следующие действия:,(i). Мы импортировали , и использовали функцию , для его мгновенной инициализации.,(ii). Мы импортировали Express и присвоили его переменной с именем ,. Теперь эта переменная имеет доступ ко всем методам Express.,(iii). Затем мы создаем простой маршрут ,, который отправляет ,. При обращении к нему мы получаем ответ.,(iv). Наконец, мы прослушиваем все входящие запросы на порту ,, который мы установили в качестве исходного порта нашего сервера.,Давайте запустим сервер, вернемся в терминал и выполним эту команду:,Когда все будет готово, откройте браузер и перейдите на сайт ,; на экране должно появиться сообщение ""Hey! Server is up"".,У команды node ,, которую мы использовали раньше, есть один недостаток - она перезапускает наш сервер каждый раз, когда файл изменяется. Чтобы упростить выполнение нашей программы Node, мы добавим новый стартовый скрипт в наш файл ,. Для его установки используйте приведенную ниже команду:,После установки вставьте следующий скрипт в файл ,:,Файл , должен выглядеть следующим образом:,Используйте следующую команду, чтобы запустить сервер и убедиться, что всё работает правильно:,: Перед запуском сервера всегда переходите в корневой каталог.,Сообщение в терминале покажет, запустила ли команда express-сервер или нет.,Как мы видим, наш экспресс-сервер запущен. Вы также увидите изображение ниже, если перейдете по URL , в своем браузере.,Вуаля! Проект отлично настроен. В следующем разделе мы настроим учетную запись MongoDB Atlas, кластер баз данных, а затем получим строку подключения от MongoDB.,В этой части руководства мы подключим кластер базы данных MongoDB к нашему приложению Node с помощью строки подключения, а также настроим наше приложение Node для подключения к нашей базе данных. Чтобы облегчить процесс обучения, мы поделили этот раздел на 3 части:,Мы настроим нашу базу данных MongoDB, а затем получим строку подключения.,Для начала посетите сайт , или войдите в нее, если она у вас уже есть. Эта статья проведет вас через ,. После завершения процесса вы должны быть перенаправлены на панель управления. Найдите кнопку Connect и нажмите ее.,В модальном окне появится опция Drivers, выберите ее, чтобы мы могли сразу же подключиться к нашему приложению.,Появится еще одно модальное окно. Выполните следующие шаги, чтобы настроить драйвер MongoDB и получить строку подключения:,Мы успешно настроили учетную запись MongoDB Atlas, сконфигурировали кластер MongoDB и получили строку подключения.,Создайте файл , в корневом каталоге. Он будет использоваться для безопасного хранения всей конфиденциальной информации нашего приложения. Присвойте строке соединения в файле , имя-значение.,: Замените вышеупомянутые имя пользователя и пароль базы данных на свои собственные.,В папке ,, которую мы создали ранее, создайте новый файл с именем ,. Для этого откройте терминал и введите следующую команду:,Теперь структура папок нашего Node-приложения должна выглядеть так, как показано на рисунке ниже, учитывая только что созданный файл.,Далее нам нужно определить метод в файле ,, который облегчит соединение между нашим приложением Node.js и базой данных. Включите следующий код в файл ,.,В приведенном выше коде мы импортировали Mongoose и создали функцию ,, которая возвращает промис, который может быть принят или отклонен через URL, используя метод Mongoose ,. URL представляет собой строку подключения, которая должна быть добавлена в файл ,.,В , импортируйте функцию , из верхней части и создайте функцию, которая подключается к нашей базе данных и запускает сервер, который будет прослушивать входящие запросы после установления соединения.,Поскольку наша функция , возвращает промис, предыдущий код использует , в своей функции запуска. Экспресс-сервер автоматически начнет прослушивать входящие запросы, как только асинхронная функция будет разрешена и соединение с базой данных будет установлено.,После перезапуска приложения Node вы должны увидеть приведенное выше сообщение, которое указывает на то, что база данных и приложение были синхронизированы. Пока всё хорошо, давайте продолжим.,В Node JS используется архитектура MVC (Model View Controller). Это шаблон проектирования. Основываясь на этой идее, мы создадим следующие конечные точки API для управления книгами:,На первом этапе мы создадим модель, а затем операции CRUD API, которые будут хранить и извлекать все данные в MongoDB.,Модель - это причудливый конструктор, полученный из схемы. Она создает и считывает документы из основной базы данных MongoDB. Другими словами, она является частью разработки, которая представляет и обрабатывает данные. Модели - это чертежи, которые организуют данные нашего приложения. Они описывают, что можно создавать, читать, обновлять и удалять, а также структуру, поведение и действия, которые разрешены. Мы можем определить нашу структуру данных с помощью схемы Mongoose.,Создайте файл , в папке с моделью. Для этого выполните следующие команды:,После выполнения команды создания файла модели , структура папок нашего Node-приложения должна выглядеть так, как показано на рисунке ниже, с учетом только что созданного файла.,Далее мы создадим простую схему книги с включенными в нее полями. В только что созданный файл , включите следующий код:,С помощью приведенного выше кода мы выполняем следующие действия.,(i). Импортировали библиотеку Mongoose для взаимодействия с MongoDB в нашем проекте Node.js.,(ii). Использовали , для создания структуры схемы базы данных для нашего документа книги в базе данных MongoDB.,(iii). ,, ,, , и , указывают на конкретные поля в каждом книжном документе.,(iv). Функция , создает модель на основе предоставленной нами структуры схемы базы данных. Кроме того, мы экспортировали модель Book, чтобы ее можно было повторно использовать в других файлах.,Теперь, когда мы структурировали схему нашего API, давайте поговорим о двух наиболее важных компонентах RESTful CRUD API: контроллерах и маршрутах., отвечают за обработку данных, принятие решений и организацию потоков API. Они получают запросы от маршрутов, взаимодействуют с моделью и определяют, какой ответ нужно дать клиенту. Они включают бизнес-логику для обработки отдельных запросов и генерации ответов.,Функции , похожи на карты, направляя входящие запросы в нужное место внутри приложения. Они определяют, к каким URL-адресам могут обращаться клиенты и что происходит при их посещении. Маршруты - это пути, по которым пользователи могут следовать, чтобы изучить ваше приложение, и каждому маршруту соответствует определенная функция или набор функций, которые обрабатывают запросы и отвечают на них.,Маршруты служат точкой входа для получения запросов в приложении Node.js. Когда маршрутизатор получает запрос, он определяет, какой маршрут должен его обработать, в зависимости от URL и метода HTTP.,Далее, определив нужный маршрут, маршрутизатор вызывает связанную с ним функцию контроллера. Контроллер выполняет бизнес-логику, получая данные из запроса и используя их для выполнения таких действий, как проверка ввода, генерация ответа и извлечение данных из базы данных.,После обработки запроса, выполнения бизнес-логики и создания ответа контроллер возвращает его маршрутизатору, который отправляет его обратно клиенту.,Создайте файл , в папке ,. Для этого выполните следующие команды:,После выполнения команды создания файла , структура папок нашего Node-приложения должна выглядеть так, как показано на рисунке ниже, с учетом только что созданного файла.,Далее нам нужно добавить следующие функции в ,, которые будут работать как интерфейс взаимодействия с моделью Book, метод для обработки бизнес-логики CRUD API, а также метод для пересылки ответов в другие части приложения.,Давайте по очереди рассмотрим каждую функцию контроллера в файле ,, чтобы увидеть, как он реализует бизнес-логику.,В файле , добавьте следующую встроенную функцию промежуточного программного обеспечения express:,Приведенный выше код создает промежуточное ПО, которое анализирует входящие JSON-данные из тела запроса и делает их доступными для вашего экспресс-приложения в ,.,: Это необходимо для управления JSON-данными в приложении, например, для обработки данных, отправленных через формы или API-запросы.,Далее откройте файл ,. Используя модель Book, мы можем создать документ для каждой книги в нашем кластере баз данных.,Далее, внутри файла ,. Чтобы получить доступ к полному списку книг, доступных в нашем API, используйте функцию , на модели Book.,Следующим шагом будет извлечение одной книги из базы данных по ее уникальному идентификатору.,Приведенный выше код выполняет следующие действия:,(i). Присвоение параметра ID из объекта параметров запроса , переменной ,. При выполнении запроса в URL будет указан идентификатор.,(ii). Метод , выполняет поиск в базе данных одного документа, поле , которого совпадает с , из параметров запроса.,Далее мы обновим документ книги в базе данных.,В приведенном выше коде сделано следующее:,(i). Метод , извлекает параметр , из запроса и применяет его к переменной ,.,(ii). Метод , изменяет единственный документ книги, хранящийся в базе данных.,(iii). Он ищет книжный документ по , и изменяет его с помощью данных из тела запроса.,(iv). В то время как параметр , возвращает измененный документ, параметр , запускает валидаторы Mongoose.,Наконец, удаление одной книги из базы данных зависит от ее ID. Добавьте приведенный ниже код в файл ,.,Приведенный выше код выполняет следующие действия:,(i). Присваивает параметр , из объекта параметров запроса , переменной ,.,(ii). Метод , модели Book удаляет из базы данных единственный документ книги с совпадающим полем ,.,Мы разработали всю бизнес-логику для операций CRUD API, которые мы будем использовать. Для создания операций мы использовали ключевые слова async и await, поскольку запрос к базе данных занимает время, и именно тогда вступает в игру атрибут Node.js asynchronous. Ответ в формате JSON, который мы возвращаем при каждой операции, содержит код состояния, а также документ книги, хранящийся в нашей базе данных.,Когда клиент отправляет запрос на конечную точку с помощью HTTP-запросов (GET, POST, PATCH, DELETE), нам нужно определить, как сервер будет отвечать, настроив маршруты.,Создайте файл , в папке ,. Чтобы выполнить эту задачу, откройте терминал и введите следующие команды:,После выполнения команды создания файла , структура папок нашего Node-приложения должна выглядеть так, как показано на рисунке ниже, с учетом только что созданного файла.,Далее мы настроим маршруты для каждого контроллера. Включите в код следующее содержимое:, В фрагменте кода,,(i). Наш API построен с использованием пакета Express, который предоставляет необходимую нам функциональность.,(ii). Express Router - это промежуточное программное обеспечение, которое организует маршруты приложения. Метод , используется для создания нового объекта маршрутизатора с помощью Express Router.,(iii). , импортирует все функции бизнес-логики из bookControllers.js.,(iv). Существует четыре типа маршрутов: ,, ,, , и ,, связанных между собой шаблонами URL и контроллерами.,(v). Мы экспортируем объект маршрутизатора для использования в ,.,Наконец, мы должны зарегистрировать файл , в нашем входном файле ,, чтобы все обращения к конечным точкам перенаправлялись на правильный путь URL. Для этого мы добавим следующий код в файл ,:,Используйте функцию ,, указывая путь и обработчик маршрутизатора.,Когда мы обращаемся к URL ,, активируется маршрутизатор. Он эффективно работает как фильтр, определяя, когда следует использовать определенный набор маршрутов.,Вот полный код файла ,:,Поздравляем! Мы успешно интегрировали базу данных MongoDB в наше приложение Node.js и создали API-действие CRUD. Прежде чем мы протестируем наш API, давайте добавим базовую валидацию и обработку ошибок, чтобы повысить его надежность и удобство использования.,Давайте поработаем над улучшением нашего CRUD API теперь, когда он подключен к нашему кластеру MongoDB и мы настроили операции CRUD API.,Для любого API обработка ошибок и проверка данных имеют решающее значение для обеспечения адекватной реакции API на неправильный ввод и неожиданные сценарии, что улучшает работу пользователей.,Если пользователь попытается добавить книгу, не указав название, автора или год издания, он не сможет этого сделать. Без эффективной проверки наша база данных может содержать неполные данные. При валидации и обработке ошибок пользователи будут проинформированы о том, что пошло не так, а не останутся в неведении.,В качестве первого шага давайте проверим нашу модель Book. Добавьте базовую валидацию в , в папке ,.,Mongoose выдаст ошибку, если мы создадим книгу без названия, автора или года публикации, поскольку эти поля являются обязательными, а сообщение об ошибке объяснит, что именно пошло не так.,Эффективный процесс управления ошибками включает в себя обнаружение ошибок и адекватную реакцию на них. Для того, чтобы любезно справиться с ошибками, давайте усовершенствуем наше CRUD API-действие ,.,Мы внедрили , во все наши операции CRUD API, чтобы гарантировать, что каждая обнаруженная проблема будет обработана должным образом. Благодаря этим дополнениям наш CRUD API теперь включает в себя все возможности по обработке и проверке ошибок. Это не только делает наш API более стабильным, но и повышает удобство работы с ним за счет отображения понятных и информативных сообщений об ошибках.,Вот полный код файла ,:,В следующем разделе руководства мы протестируем наш CRUD API, чтобы убедиться в его стабильности и надежности. Мы уже близки к финишу.,После реализации обработки ошибок и валидации очень важно протестировать наш CRUD API. Тестирование гарантирует, что все работает так, как запланировано, и позволяет обнаружить любые проблемы до того, как они повлияют на наших пользователей. Давайте начнем тестировать наш CRUD API с помощью Postman.,Поздравляем! Мы сделали это. После тестирования созданных нами CRUD API они стали полностью работоспособными. Учебник начался с создания среды разработки и закончился созданием нашего API. Это впечатляющее достижение, и мы должны им гордиться.,Это было фантастическое путешествие. Я с удовольствием создал для вас этот материал и многому научился в процессе. Создание базового CRUD API с нуля - сложная задача, требующая терпения, настойчивости и желания учиться. К счастью для меня, вы проявили все эти качества и даже больше.,В этом уроке мы рассмотрели разработку бэкенда, создав простой Book CRUD API с помощью Node.js и Express.js. В этом уроке мы рассмотрели широкий спектр тем, включая настройку среды разработки, создание учетной записи MongoDB Atlas и получение строки подключения, разработку CRUD API с помощью Express.js и Node.js, а также их тестирование с помощью Postman.,Поздравляем с созданием CRUD API с помощью Node.js и Express! Впереди еще много приключений в области кодинга. Да пребудут с вами коды!,Если вы можете оставить отзыв, я буду вам очень признателен. Пожалуйста, оставляйте их в разделе комментариев. Если вы нашли это руководство полезным, пожалуйста, поделитесь им с другими, кому оно тоже может быть полезно."
Интеграция шаблонов Django с React для создания динамических веб-страниц," — это высокоуровневый фреймворк на Python, который способствует быстрой разработке и предлагает понятный и прагматичный дизайн. Django популярен благодаря своей надежности, масштабируемости и высокоуровневой абстракции при создании динамических веб-сайтов на основе Python.,Django разработан по принципу DRY (Don’t Repeat Yourself) и позволяет автоматизировать каждый повторяющийся шаг на протяжении жизненного цикла разработки. Именно здесь в игру вступает язык шаблонов Django (DTL). DTL позволяет интегрировать логику Python в статические HTML-файлы для их динамического отображения с использованием серверных данных.,Между тем, , — это универсальная библиотека JavaScript для создания расширенных пользовательских интерфейсов. React в основном используется для разработки одностраничных приложений, в которых данные меняются со временем. В ней используется компонентная архитектура и декларативное программирование для создания пользовательских интерфейсов, что позволяет абстрагироваться от сложностей JavaScript. При компиляции менеджером пакетов node (node package manager — npm) код компилируется на обычном JavaScript для запуска в любом браузере.,В этой статье мы создадим динамичный демонстрационный блог-сайт с использованием Django и React, чтобы продемонстрировать сочетание серверных функций Django и интерактивного пользовательского интерфейса React.,Django в первую очередь предназначен для работы со статическими файлами, а платформа React, основанная на компонентах, может быть легко подключена к шаблонам, управляемым Django. Это дает нам преимущество в том, что платформа статического одностраничного приложения React работает как динамическое многостраничное приложение.,React предназначен для работы изолированно, отображая свои компоненты в клиентском браузере и обновляя все приложение в целом всякий раз, когда требуются радикальные изменения. Но благодаря Django, обслуживающему статические файлы, все приложение может находиться в одном блоке. Это не только позволяет легко интегрировать серверную часть с браузером клиента, но и позволяет разработчикам интерфейса и серверной части работать над масштабированием или отладкой всего приложения, не наступая друг другу на пятки.,В этой статье мы собираемся поэкспериментировать с моделью сайта-блога, интерфейс которого отображается в React. Это продемонстрирует, как Django может использовать гибкость универсального фреймворка, такого как React, для интеграции надежной серверной платформы в единое целое.,Веб-сайт просто отобразит выбор категорий записей в блоге для пользователей, а также идентификатор статьи и категорию в браузере клиента. Такая настройка Django-React идеальна не только для динамического отображения нескольких компонентов React, но и для обновления их серверными данными без необходимости повторного развертывания всего фреймворка каждый раз.,Это демонстрация базового веб-сайта, который мы создадим:,Мы начнем с инициализации шаблона Django, ,, расположенного в каталоге шаблонов нашего приложения ,. Сюда будут включены теги ,, которые наше приложение React будет монтировать в наш ,, который выглядит примерно так:,Обратите внимание, что каждый , имеет уникальный идентификатор, соответствующий определенному компоненту React. Таким образом, при рендеринге этого HTML-шаблона на стороне сервера Django соответствующие компоненты React будут привязаны к этим разделам.,Рендеринг компонентов React с помощью HTML-шаблона сам по себе не является чем-то особенным, но все становится интереснее, когда в игру вступает DTL. В теге , мы связали React с ,. Определив его в шаблоне Django (,), мы связали наш , напрямую со статическими файлами в каталоге сборки нашего приложения React.,Таким образом, Django может манипулировать структурой DOM, в которую React будет загружать свои компоненты, чтобы заставить статичные компоненты React отображаться динамически.,Имея готовый шаблон Django для обслуживания React, мы можем определить два компонента React для каждого ,. Поскольку мы хотим отобразить идентификатор статьи (,) и категорию (,), отправленные с сервера в клиентский браузер, мы можем определить для этого файл JavaScript в каталоге нашего приложения , React. Таким образом, наш , скрипт просто получит ID статьи и реквизиты категории и отобразит их в ,.,Далее, нам нужно определить другой JavaScript-файл в том же каталоге для обработки списка доступных категорий, отправленного из шаблона Django. Для этого мы можем создать ,, который будет принимать аргумент в качестве списка категорий и отображать его в ,.,Теперь, когда наша статья и компоненты , готовы, мы можем определить наш ,, который является точкой входа в наше приложение React. Код будет выглядеть следующим образом:,Структура , предназначена для того, чтобы стать точкой входа для Django в наше приложение ,. Когда сервер клиента отправляет запрос, , на стороне сервера вызывается функция, загружающая DOM. Это запускает наш прослушиватель событий в ,, и элементы div , и , обрабатываются React с помощью их идентификаторов.,Затем атрибуты идентификатора статьи, категории и выбора извлекаются из соответствующих разделов. Наконец, компоненты , и , монтируются в DOM с помощью функции ,.,С точки зрения потока данных, вы можете видеть, что шаблон Django полностью контролирует то, что приложение React отображает в браузере клиента.,При передаче данных из Django в компоненты React, которые будут отображаться, мы будем использовать файл , в каталоге нашего приложения Django. Например, мы можем отправить такие свойства, как идентификатор статьи, категория и доступные категории, в качестве аргументов в ,, непосредственно туда, где они отображаются.,Код для нашего , будет примерно таким:,Чтобы перехватить эти реквизиты, мы можем обновить наш , код, включив в него заполнители DTL следующим образом:,Вносим эти простые изменения на стороне сервера и теперь можем превратить наше приложение React, функционирующее как SPA (одностраничное приложение), в многостраничное приложение.,В текущей настройке наши блоги динамически отображаются на сайте с серверов Django. Этот сервер является шлюзом для всех видов персонализации сайта.,Самая простая настройка, которую мы, возможно, захотим включить, — это просто включить управление состоянием на сайте таким образом, чтобы, когда пользователь выбирает категорию, она отправлялась на сервер через API для получения соответствующего идентификатора статьи и отображения его в браузере клиента.,На стороне React это можно сделать несколькими способами, но DTL предоставляет вам повышенную гибкость при обработке запросов пользователей на лету, что довольно сложно выполнить из-за ограничений, связанных со статическим отображением страниц в React.,Мы можем усовершенствовать наш файл , для обработки запроса ,, вызванного изменением определенного состояния, путем внесения этих необходимых изменений:,Мы просто определили словарь, который сопоставляет идентификаторы статей с их категориями, и любая категория, выбранная пользователем, затем используется для получения соответствующего идентификатора статьи и отправки его обратно клиенту.,Конечно, это всего лишь демонстрация, но она дает представление о том, чего могут достичь , Django в сочетании с DTL в контексте динамического рендеринга страниц, легко обрабатывая сложные сценарии между интерфейсом и серверной частью.,В реальных реализациях метод сопоставления можно использовать для извлечения целых релевантных статей из баз данных или API-интерфейсов и добавления ограничений в соответствии с профилем пользователя для получения персонализированного контента.,Коды компонентов React должны быть в отдельных файлах JavaScript или в специальном приложении React. Вы можете легко создать приложение React, используя команды npm CLI. Это различие делает кодовую базу React модульной и удобной в обслуживании, а также позволяет разработчикам интерфейса работать в пределах своей зоны комфорта, не вмешиваясь в шаблоны Django.,Создайте завершенное приложение React, запустив , для компиляции приложения React в статические файлы. Затем Django может обслуживать эти статические файлы своими шаблонами, которые отображаются по запросу пользователя, и компонентами React, определенными в , все статические файлы можно легко монтировать на них.,Интеграция этих двух мощных платформ может привести к возникновению сложностей и разочарований, если ошибки не обрабатываются должным образом. Некоторые методы отладки могут избавить вас от многих проблем.,Вам нужно убедиться, что Django правильно настроен для обслуживания статических файлов, в которых хранится ваше приложение React. Вы можете сделать это, убедившись, что , и , в вашем ,указывают на правильные каталоги. Неправильная настройка может привести к тому, что встроенные файлы React не будут найдены или обработаны некорректно.,Когда вы создаете приложение React, выходные данные находятся в каталоге сборки корневого каталога вашего проекта React, и он должен быть доступен для Django. Вы можете скопировать папку , из , в статическую папку, расположенную в корневом каталоге вашего приложения Django, или связать ее с помощью , для получения более надежной ссылки.,Помните, что при сборке React добавляет ссылку на кэш к имени файла , поэтому вы можете использовать команду Django ,, чтобы убедиться, что последняя версия вашего приложения React поддерживается Django.,Использование инструментов разработчика браузера для проверки сетевых запросов на наличие статических файлов может дать вам представление о том, какой HTML-контент отображается в сравнении с тем, что вы ожидаете. Проверка на наличие ошибок 404, которые проявляются, если статические файлы вашего каталога сборки React неправильно связаны с Django, может позволить вам точно определить отсутствующие поля, вызывающие ошибки. Помимо этого, браузерное расширение React Developer Tools может быть полезно для проверки иерархии и состояния компонентов React.,При передаче данных из Django в React с помощью атрибутов данных вам необходимо убедиться, что данные правильно сериализованы и десериализованы, как ожидалось, с помощью таких методов, как ,. Если вы этого не сделаете, вы можете столкнуться с неправильным форматированием JSON или экранированием HTML, что может нарушить поток данных.,Стратегическое размещение инструкций , в вашем коде React поможет вам избежать длительных сеансов отладки. Отслеживание фреймворка ведения журнала Django для диагностики проблем с серверной частью может быть чрезвычайно полезным для определения того, находится ли источник ошибки во внешнем интерфейсе или в серверной части, и для точного определения того, где происходит сбой интеграции.,В руководстве мы рассмотрели ключевые этапы интеграции приложения React с Django на практическом примере веб-приложения блога Мы обсудили, как такая интеграция может позволить нам использовать лучшее из обоих этих мощных фреймворков.,Мы также продемонстрировали, как язык шаблонов Django (DTL) играет ключевую роль в динамическом отображении HTML с использованием серверных данных и объединении серверных возможностей Django с адаптивными интерфейсными компонентами React. Мы ознакомились с примерами кода для файлов React frontend и Django backend, чтобы воспользоваться преимуществами React с функциональными возможностями Django backend, создавая динамические веб-страницы, которые являются масштабируемыми и интерактивными.,В статье также приведены советы по отладке и рекомендации по повышению гибкости, позволяющие сделать процесс разработки менее утомительным и позволяющим нескольким командам вносить свой вклад в рабочие процессы, не мешая друг другу. Django и React могут стать отличным выбором в разнообразной среде веб-разработки. Другой пример интеграции Django и React в проекте приведен в этом руководстве по использованию фреймворка Django REST и React."
Установите несколько Erlang и Elixir с помощью vfox," — это популярный инструмент общего управления версиями, написанный на Go, а механизм подключаемых модулей использует Lua для достижения расширяемости. В настоящее время vfox поддерживает управление версиями большинства основных языков программирования, и экосистема является довольно мощной.,Сообщества Elixir и Erlang уже давно пользуются популярностью для установки и управления многоверсионными средами с помощью ,. asdf также является универсальным инструментом управления версиями, и его экосистема очень богата.,Vfox очень похож на asdf-vm в том смысле, что использует файл , для управления информацией о версии на уровне проекта и глобальной версии. Это означает, что если вы раньше использовали asdf, переключиться на vfox не составит труда. Поскольку основные реализации vfox и asdf немного отличаются, vfox выполняется почти в 5 раз быстрее, чем ASDF~, а в официальной документации также приведены результаты тестирования: сравнение version-fox Comparison c asdf-vm.,Если вы использовали asdf для управления и поддержки нескольких версий , и ,, то vfox также станет для вас хорошим выбором.,Эта статья покажет вам, как установить и управлять несколькими версиями Erlang и Elixir через vfox.,vfox (version-fox) совместим с разными ОС, что означает, что его можно использовать как в Windows, так и в Unix-подобных системах. Суть этой статьи — установка и управление несколькими версиями Erlang и Elixir через vfox. Поскольку две реализации подключаемого модуля vfox для управления версиями Erlang и Elixir еще не поддерживают управление в операционной системе Windows, примером среды в этой статье в основном является среда Ubuntu 20.04 Linux. Давайте начнем.,Сначала установите vfox:,Чтобы vfox мог найти установленные версии Elixir и Erlang, vfox должен быть смонтирован в оболочку по умолчанию. Затем измените конфигурацию оболочки (возьмем Bash в качестве примера):,После установки VFOX давайте установим следующие плагины:,Далее мы можем установить несколько версий Erlang и Elixir и управлять ими с помощью двух плагинов vfox , и ,, установленных выше.,Поскольку Elixir зависит от Erlang, нам необходимо установить Erlang перед установкой Elixir. Erlang устанавливается через исходный код соответствующей версии, поэтому нам необходимо иметь соответствующий набор инструментов компиляции, в качестве примера возьмем Ubuntu 20.04:,Теперь пришло время установить Erlang.,Теоретически вы можете установить любую версию, представленную в ,. Поскольку он скомпилирован и установлен из исходного кода, процесс установки займет некоторое время. Когда вы увидите следующее сообщение, установка завершена.,Давайте воспользуемся vfox, чтобы переключиться на только что установленную версию Erlang/OTP, чтобы убедиться, что установка прошла успешно:,Если REPL запустится правильно, то установите его. Приступим к установке Elixir.,Поскольку установка Elixir также компилируется и устанавливается из исходного кода соответствующей версии, компиляция Elixir должна зависеть от Erlang, поэтому мы сначала позволяем текущей оболочке найти только что установленный Erlang.,Когда вы увидите сообщение «Install elixir@1.15.2 success!», это означает, что установка прошла успешно. Установка может быть подтверждена IEX как полная успешная:,Если вы хотите установить другую версию Elixir, убедитесь, что текущая версия Erlang/OTP совместима с версией Elixir.,Мы можем использовать,, чтобы установить версию Erlang и Elixir, которую мы установим по умолчанию.,Два плагина в , для установки и управления версиями Erlang/OTP и Elixir также поддерживают управление несколькими версиями в системе MacOS Darwin."
GitVerse обновилась: упрощенная разработка и новые функции,"Платформа GitVerse получила значительные обновления, ускоряющие разработку и добавляющие новые возможности.,Эти обновления и планы развития делают GitVerse еще более мощной и удобной платформой для разработки программного обеспечения, позволяя разработчикам создавать высококачественный код с большей эффективностью и безопасностью."
Балансировка нагрузки с помощью Docker Compose + Nginx + Nestjs,"Всем привет.,Возможно, вы сталкивались со случаями, когда ваш сервер перегружен, тормозит и не может обрабатывать входящие запросы.,И когда вы сталкиваетесь с этим случаем, есть несколько способов решения этой проблемы, например:,и т. д,...,Сегодня я расскажу, как реализовать Вариант 3. Технологии, которые я использую:,Убедитесь, что Node.js (версия >= 16) установлен в вашей операционной системе.,Настроить новый проект с помощью Nest CLI довольно просто. Установив npm, вы можете создать новый проект Nest с помощью следующих команд в терминале вашей ОС:,Затем перейдите в папку с исходным кодом:,И у вас есть структура папки, как на картинке:,Установите докер для вашего устройства: ,Нам нужно настроить 3 части:,Создайте корневой каталог, создайте новую папку с именем ,:,Создайте файл с именем , в каталоге , следующим образом:,Приведенный выше фрагмент конфигурации представляет собой файл Dockerfile для создания образа Docker на основе образа ,.,Затем создайте файл , в каталоге ,.,В основном каталоге создайте файл Dockerfile для сервера следующим образом:,Затем создайте файл ,:,Приведенная выше конфигурация представляет собой файл, созданный докером, используемый для определения и запуска служб в среде Docker.,Создайте файл , в корневом каталоге:,Наконец, чтобы запустить сервер, вы можете использовать команду:,Затем вы можете проверить контейнеры с помощью ,:,Наконец, вы можете получить доступ к серверу по URL: ,.,Вы можете проверить статистику контейнеров с помощью команды ,.,Вы можете найти исходный код ,.,Спасибо за чтение."
Редактируемый элемент содержимого в React,"Недавно передо мной была поставлена задача реализовать функцию, позволяющую пользователям беспрепятственно редактировать контент, например, изменять абзацы или заголовки. Я исследовал различные подходы к решению этой задачи, начиная от переключения текстовых элементов в элементы ввода по щелчку мыши или событиям , и заканчивая использованием свойства , в библиотеке Ant Design.,Все вышеперечисленные предложения сработали, но не дали того результата, который я искал. Затем я узнал кое-что новое. Я понял, что текстовые элементы (теги абзацев, заголовков и т. д.) также можно сделать редактируемыми с помощью встроенного атрибута ,.,Переданный атрибут , делает элемент редактируемым при нажатии на него, что может быть очень полезно при создании редакторов, поэтому, по сути, это дает пользователю возможность вводить html непосредственно в DOM (Document Object Model), что, если быть честным, может быть рискованным из-за несогласованности браузеров, так что это должно быть обработано должным образом., - это свойство элемента html, которое помогает отображать насыщенные тексты в браузере и редактировать их на ходу. Сделать элемент редактируемым довольно просто.,Давайте посмотрим на пример:,В примере выше мы заметили, что в элемент передается реквизит.,: Этот реквизит имеет значение ,, что означает для браузера, что этот элемент является редактируемым.,: Этот реквизит также добавлен для устранения предупреждений, возникающих при использовании реквизита ,, это предупреждение, которое вы можете получить ""A component is contentEditable and contains children managed by react"", если используете его в проекте React.,Теперь давайте сохраним значение, которое вводится в нашем редактируемом элементе.,Теперь в этом примере мы можем наглядно увидеть, как мы перехватываем значения, введенные в редактируемый контент, и сохраняем их в состоянии. А если мы перейдем в консоль и проверим, как сработала функция ,, то увидим, что значение отобразилось. В нашем случае «Hello there»‎.,Существуют и другие методы сохранения данных, я решил использовать , по своему усмотрению, но вы можете использовать и другие функции, например ,, ,, , и т.д.,Редактируемые элементы не имеют функции ,, как элементы формы (теги ,, , и т.д.).,Давайте сделаем последний трюк. Теперь у нас есть редактируемый контент, но так же, как у input'ов есть места для вставки, когда они пусты, мы тоже можем добавить места для вставки в наши элементы, когда они пусты.,Вот как это делается:,На изображении выше вы можете видеть, что мы добавили два новых атрибута.,: Этот атрибут помогает нам добавить соответствующее значение места для вставки в наш элемент.,: Это добавление имени класса к нашему редактируемому элементу, чтобы мы могли указать его в нашем css.,Затем мы сделаем последний удар, который, как мы знаем, будет в нашем css-файле.,С помощью этого css-свойства, добавленного к нашему классу элемента, наш элемент должен иметь место для вставки, указанное как , в html.,Вот и всё, ребята!,Мы успешно создали редактируемый элемент, сохранили его состояние локально, а также добавили место для вставки, для моментов, когда он пуст.,Желаю вам успехов в разработке!"
Как настроить источник данных TypeORM в проекте NestJS,"Привет! С тех пор как я начал работать с NestJS, я искал надежный способ управления базой данных с помощью TypeORM. Сегодня я расскажу о своем пути и шагах, которые я предпринял, чтобы всё это настроить.,Итак, прежде чем мы погрузимся в работу, давайте попробуем понять, что такое TypeORM и NestJS.,TypeORM – это инструмент объектно-реляционного отображения (ORM), который упрощает работу с базами данных в приложениях на Node.js и TypeScript. Он поддерживает различные базы данных, такие как MySQL, PostgreSQL, SQLite и другие, позволяя разработчикам использовать концепции объектно-ориентированного программирования вместо того, чтобы работать с низкоуровневыми SQL-запросами.,TypeORM также предоставляет такие возможности, как миграция схем, построение запросов и управление связями между таблицами.,NestJS – это прогрессивный фреймворк Node.js, предназначенный для создания эффективных, надежных и масштабируемых приложений на стороне сервера. Он использует возможности TypeScript, позволяя разработчикам писать структурированный, удобный в обслуживании код.,NestJS использует модульную архитектуру, позволяющую организовывать код в модули, контроллеры, сервисы и провайдеры. Он обеспечивает встроенную поддержку таких функций, как инъекция зависимостей, промежуточное ПО и GraphQL, что делает его популярным выбором для создания современных веб-приложений и API.,Кроме того, NestJS легко интегрируется с другими библиотеками и фреймворками, включая TypeORM, что позволяет оптимизировать рабочие процессы разработки. По умолчанию он использует надежный фреймворк HTTP-сервера Express, а также может быть настроен на использование других фреймворков HTTP-сервера Node.js.,Хорошо, это уже много, верно? Что ж, прежде чем двигаться дальше, давайте попробуем разобрать фразу «NestJS - это прогрессивный фреймворк Node.js»‎, которая просто означает, что NestJS использует новейшие возможности языка JavaScript и серверных фреймворков, тем самым обеспечивая разработчикам гибкость в написании кода на наиболее подходящем языке для их проектов.,Выполните следующие команды, чтобы установить ваш проект NestJS:,После установки запустите сервер разработки:,Теперь давайте протестируем наш проект, чтобы убедиться, что , правильно настроил весь кодовый код, отправив запрос , на корневой URL.,Отлично! Наш проект запущен и работает.,Давайте создадим базу данных для проекта из интерфейса Pgadmin 4.,Откройте интерфейс Pgadmin 4 и щелкните правой кнопкой мыши на вкладке Databases, чтобы создать новую базу данных, как показано ниже.,Убедитесь, что база данных успешно создана.,Отлично, пришло время добавить базу данных в наше приложение NestJS с помощью TypeORM.,Создайте новую папку , в папке , вашего приложения, как показано ниже.,Создайте новый файл , в папке , и добавьте в него следующий код:,Добавьте модуль TypeORM в массив импортов модулей ,, как показано ниже:,Затем сохраните и подтвердите в консоли успешное подключение к базе данных.,Если вы видите, что база данных успешно подключена, то вы молодцы! В противном случае вернитесь к предыдущим шагам, чтобы проверить, правильно ли вы следовали настройкам.,Теперь мы можем продолжить использовать наш сервис , с помощью TypeORM.,Давайте создадим модуль ,, контроллер, провайдер и структуру для взаимодействия с нашей только что подключенной базой данных.,Приведенная выше команда сгенерирует модуль ,, сервис и контроллер и обновит , с модулем ,.,Добавьте следующий код в файл , и перезапустите сервер разработки, чтобы создать таблицу пользователей в базе данных.,Проверьте интерфейс Pgadmin 4 и убедитесь, что TypeORM автоматически загрузил , и создал таблицу , в вашей базе данных, как показано ниже.,Возможно, вам понадобится обновить базу данных, если вы не увидите её в первый раз.,Теперь давайте реализуем наш первый обработчик службы ,, добавьте следующий код в файл ,:,Мы добавили метод , для обработки создания пользователя, когда POST-запрос отправляется с требуемым телом запроса в контроллер конечной точки, использующий метод службы ,.,В качестве аргумента функция принимает объект , с типом интерфейса ,. Обычно это должен быть объект DTO (Data Transfer Object) для структуры и проверки типов данных, но поскольку это выходит за рамки данного руководства, мы используем интерфейс только для формы данных.,Мы вызвали метод create хранилища , и присвоили его возврат переменной , для хранения только что созданного объекта ,. Затем мы вызвали метод ,, чтобы сохранить объект в базе данных.,Теперь давайте воспользуемся обработчиком сервиса , в контроллере ,, который обрабатывает POST-запрос на создание нового пользователя.,Протестируйте только что созданную конечную точку, отправив POST-запрос на , с именем пользователя и паролем в качестве тела запроса.,Хорошо, давайте проверим базу данных, чтобы убедиться, что все в порядке, потому что мы уже получили код состояния ответа ,, которого должно быть достаточно, чтобы понять, что наше приложение нормально взаимодействует с базой данных, используя источник данных TypeORM.,Если вы хотите оптимизировать запросы к базе данных, внедрить новые операции манипулирования данными или интегрироваться со сторонними сервисами, расширение репозитория DataSource с помощью пользовательских методов может стать решающим фактором для беспрепятственного взаимодействия с базой данных.,Здесь мы рассмотрим преимущества пользовательских методов и предоставим пошаговое руководство по их внедрению в ваши приложения NestJS. Итак, давайте погрузимся в работу и раскроем весь потенциал репозитория DataSource!,: Пользовательские методы позволяют разработчикам внедрять специфические функциональные возможности, которые недоступны в стандартном хранилище DataSource. Настраивая репозиторий DataSource с помощью пользовательских методов, разработчики могут решать уникальные задачи, выполнять операции манипулирования данными, агрегировать их или оптимизировать, что необходимо для их проекта.,: Пользовательские методы могут быть разработаны для оптимизации запросов к базе данных, получения данных и операций манипулирования данными, что приводит к повышению производительности и эффективности. Используя пользовательские методы, разработчики могут реализовать оптимизированные алгоритмы, механизмы кэширования или оптимизацию запросов с учетом конкретных потребностей и характеристик своих приложений.,: Пользовательские методы способствуют повторному использованию кода, инкапсулируя конкретную логику, алгоритмы или операции в компоненты многократного использования. Модулируя пользовательские методы, разработчики могут поддерживать более чистые, организованные и удобные кодовые базы, что облегчает управление, отладку и совершенствование репозитория DataSource в долгосрочной перспективе.,Ну вот и все, переходим к действию. Итак, у нас есть простое CRM-приложение, связанное с управлением пользователями. Давайте добавим пользовательский метод репозитория, который поможет нам фильтровать пользователей по имени пользователя.,Чтобы реализовать это, создадим модуль , и службу ,. Мы создадим эти файлы в соответствии с принципами модульности архитектурного паттерна NestJS.,Создайте файлы в ранее созданной папке , и добавьте следующий код:,Из приведенного выше кода , мы расширили ,, вызвав метод , на сервисе , и передав , в качестве аргумента, чтобы получить хранилище для конкретной таблицы.,Затем мы вызвали метод , на ,, полученный в результате ,, чтобы добавить наш пользовательский метод. В наш метод , мы передали объект, который будет содержать все наши пользовательские методы для пользовательского хранилища, которое мы определили как ,.  Здесь мы просто добавили только один пользовательский метод в наше пользовательское хранилище, а именно ,. Он запускает запрос фильтрации таблицы пользователей по указанному имени пользователя.,Поскольку наш , является инжектируемым, мы можем внедрить его в наш , и использовать только что созданный метод , после добавления модуля , в массив , модуля , следующим образом.,Давайте используем метод , из , в нашем , для фильтрации пользователей по любому имени пользователя, переданному в качестве аргумента запроса при отправке запроса.,Из приведенного выше кода мы внедрили наш пользовательский ,, добавив следующее в конструктор класса private ,.,Сервис , обрабатывает запрос, который мы используем в нашем пользовательском методе , , ,, который возвращает обещание.,Теперь давайте используем этот обработчик сервиса в нашем контроллере пользователя для фильтрации пользователей по их имени пользователя.,Протестируйте конечную точку фильтрации.,Здесь мы получили список, содержащий один объект , с именем пользователя, похожим на имя пользователя, которое мы передали в качестве запроса.,Вуаля! Вот и все, теперь вы готовы приступить к работе с NestJS, TypeORM и DataSource.,Спасибо за чтение!,Если вы нашли эту статью полезной, пожалуйста, поделитесь ею с друзьями и коллегами! Следите за новыми материалами, и давайте продолжать учиться и развиваться вместе."
"Настройка среды разработки Express (Typescript, Eslint, Prettier)","Я хотел настроить среду разработки Express с последней версией пакетов NPM. Но я столкнулся с некоторыми проблемами. Все проблемы я решил после долгих поисков в интернете. Поэтому я решил написать небольшой текст, чтобы объяснить это тому, кому это нужно.,Я хочу использовать модули , в этом проекте. Итак, установите целевой , и модуль ,.,Работать с модулями ESM с помощью ts-node немного сложнее. Чтобы решить эту проблему, я создал файл ,.,Затем импортировал на узел этот файл ,. Также вы можете увидеть файлы ,, переданные на узел.,Это мой выбор от мастера,Этот мастер создал файл ,. Этот файл представляет собой новую форму файла конфигурации, называемую плоским файлом конфигурации.,В VS Code расширение , не работает с новым плоским файлом конфигурации. В настройках вам следует изменить экспериментальный флаг ,.,Затем создайте файл ,.,Некоторые изменения необходимы в файле ,.,Вот и все. Спасибо за прочтение статьи!"
Как улучшить производительность приложения NodeJS и Redis,"Вы устали ждать, пока ваши данные будут извлечены из базы данных каждый раз, когда запрос поступает на ваш сервер? Открытие соединений, выполнение запросов — все это может замедлить работу вашего приложения. Но что, если бы был способ обойти все это?,Ввод кэширования.,Благодаря кэшированию вы сохраняете часто используемые данные во временном хранилище, что значительно сокращает время, необходимое для их извлечения. А Redis — это молниеносное хранилище данных в оперативной памяти, которое идеально подходит для приложений Node.js.,Представьте, что вы получаете данные за день, час или даже минуту, а Redis обрабатывает их за долю времени, которое требуется для запроса вашей базы данных. Это похоже на волшебство — ваши пользователи получают свои данные быстрее, а ваш сервер может обрабатывать больше запросов, не напрягаясь.,Так зачем же ждать? Позвольте Redis революционизировать способ обработки данных в ваших приложениях Node.js. Попрощайтесь с узкими местами в базе данных и поприветствуйте молниеносную производительность. Пришло время позволить Redis поразить вас своей скоростью.,В этой статье мы будем использовать ExpressJS, Redis и Node Js для кэширования данных и обработки http-запросов. Поэтому хорошо иметь NodeJS, NPM, Docker.,Мы будем использовать docker для создания сервера Redis, который будет обрабатывать хранение и извлечение данных.,Создайте каталог для работы в нем, внутри этого каталога создайте другой каталог с именем ,, который будет содержать исходный код нашего приложения и другой файл с именем ,.,Ваша окончательная структура должна быть такой:,Внутри папки , выполните следующие команды:,Затем обновите свой ,, включив в него псевдонимы некоторых новых команд. Вы можете скопировать пример.,После создайте файл , в папке ,, он будет содержать следующие строки:,Далее запустите приложение с помощью команды:,А посетив ,/, вы увидите «Hello world!».,Теперь остановите сервер, отключив терминал, и попытаемся подключить Redis. Добавьте следующие строки в свой ,Это создаст соединение между вашим приложением и сервером Redis.,Если вы попытаетесь запустить приложение сейчас, оно вылетит, и это потому, что мы еще не настроили сервер Redis, поэтому давайте сделаем это сейчас.,В , скопируйте следующие строки:,В главном каталоге выполните следующие команды:,Теперь, если вы снова запустите приложение, оно напечатает:, ,Теперь настройте файл ,, включив в него следующие строки:,Здесь мы попытались создать поддельное обещание для получения массива данных и сохранения его в кеше в течение 60 секунд. Вы можете изменить его в зависимости от того, как часто меняются данные.,Теперь снова перейдите по адресу ,.,Вы должны увидеть, что вы получили данные, массив которых имеет значение ,. Попробуйте обновить страницу, после чего вы увидите быстрый ответ с тем же ответом, за исключением того, что теперь он имеет значение ,.,Перед кэшированием:,После кэширования:,Вы можете увидеть разницу во времени до того, как кеш занял 1 с, потому что мы установили , на ожидание 1 с, но обычно это занимает меньше или больше времени в зависимости от размера данных и базы данных, с которой вы работаете. Но с помощью кэширования вы можете быть уверены, что ваши данные будут извлекаться быстрее, чем каждый раз получать их из базы данных.,Это общий обзор. Я попытался объяснить важность включения механизма кэширования для хранения часто запрашиваемых данных, который улучшит производительность вашего приложения и сократит время, которое клиент будет ожидать обработки запроса. Спасибо, что уделили время чтению статьи, надеюсь, что она будет для вас полезной!"
Реализация паттерна репозитория в Go с репозиториями in-memory и MySQL,Благодарю за прочтение! Счастливого кодинга!
Python: Поиск максимальных и минимальных значений в массивах,"Библиотека NumPy в Python очень универсальна. В ней есть предопределенные функции, позволяющие даже находить максимальные и минимальные элементы между двумя массивами. Давайте познакомимся с ними в этой статье. Здесь мы подробно разберемся с функциями , и ,, начиная с их синтаксиса и заканчивая вариантами использования. Давайте начнем., , это самое высокое значение в наборе данных, а , , самое низкое значение в наборе данных. Важно вычислить максимум и минимум для набора данных. Когда у вас много чисел, поиск самого большого и самого маленького помогает вам понять, насколько широк диапазон.,Иногда в программах вам нужно выполнять разные действия в зависимости от наибольшего или наименьшего числа. Таким образом, их поиск помогает вам принимать разумные решения в вашем коде. Если вы ожидаете, что цифры будут в определенных пределах (например, температура не опустится ниже нуля), сверка с максимальными и минимальными значениями поможет выявить ошибки или неожиданные данные.,Функция , , чисел поэлементно и , новый массив, содержащий , из каждой позиции в исходных массивах.,Синтаксис этой функции выглядит так:,Здесь:,Он сравнивает два списка чисел, элемент за элементом, и возвращает новый список, содержащий максимальное значение для каждой позиции в исходных списках. Например, если у вас есть два массива: , и ,, функция , сравнит каждую пару чисел: ,, ,, и ,. Он выберет большее число из каждой пары и вернет вам новый массив: ,.,Давайте посмотрим его реализацию в коде:,Этот код будет использовать , для сравнения двух определяемых пользователем массивов, поиска максимального количества элементов и печати нового массива, содержащего эти максимальные числа.,Выход:,Функция , сравнивает два списка по номеру. Он возвращает вам новый список с , числами из каждой позиции исходных списков.,Вот как выглядит его синтаксис:,Как это работает:, просматривает два списка чисел и выбирает наименьшее число из каждой совпадающей позиции. Например, если у вас есть два массива: , и ,, , сравнит каждую пару чисел: ,, , и ,. Он выберет меньшее число из каждой пары и вернет вам новый массив: ,.,Давайте разберемся в этом с помощью кода:,Этот код будет использовать , для сравнения двух созданных нами массивов, поиска наименьших чисел и отображения их в новом массиве.,Выход,Здесь мы обсудили функции , и ,, их синтаксис, работу и варианты использования. Я надеюсь, что вы тщательно изучили каждый раздел. И если вы это сделали, то теперь вы можете легко вычислить массив, содержащий максимальное или минимальное количество элементов, сравнив любые два массива. "
Как реализовать веб-токены JSON (JWT) в PHP — Учебное пособие по аутентификации PHP,"В этом руководстве мы рассмотрим процесс создания веб-токенов JSON (JWT) с нуля в PHP, который является более совершенной и более безопасной схемой аутентификации.,Внедрив этот расширенный подход, вы получите надежный и высокозащищенный механизм аутентификации, который значительно повышает защиту данных и аутентификацию пользователей., — это строка, состоящая из трех частей, каждая из которых соединена точкой (,), а затем закодирована в формате ,.,Заголовок. Заголовок состоит из метаданных о токене, таких как тип токена и используемый алгоритм.,Полезная нагрузка: в структуре , полезная нагрузка инкапсулирует определенные индексы, называемые утверждениями, содержащие пользовательские данные, закодированные с использованием ,.,Генерируется путем создания хеша заголовка и полезной нагрузки в сочетании с секретным ключом, который обычно генерируется в виде 256 бит или 32 байта. По соглашению секретный ключ соответствует размеру выходного хэша.,Мы будем использовать ссылку ниже, чтобы сгенерировать секретный ключ, который нам нужен для этого проекта:,Веб-токен JSON — это просто комбинация заголовка, полезных данных и подписи, где каждый компонент объединяется с точками (,) между ними:,Чтобы запустить этот проект, загрузите стартовую версию проекта по следующей ссылке: Аутентификация PHP с ,.,После загрузки внимательно просмотрите файл ,, включенный в репозиторий, на предмет получения полной информации о предустановленных пакетах. Файл содержит важную информацию, такую ​​как примечания по безопасности и передовому опыту. Потратив время на тщательное прочтение ,, вы обеспечите плавную настройку и понимание проекта.,Чтобы начать настройку проекта, используйте ,, выполнив следующую команду:,Эта команда клонирует репозиторий проекта в вашу локальную систему, что позволит вам продолжить процесс установки и настройки.,После клонирования проекта из GitHub структура вашего проекта должна соответствовать следующему макету:,Убедитесь, что вы поддерживаете эту структуру и следуете всем инструкциям, приведенным в файле README, для успешной настройки и запуска проекта.,При ссылке на наш проект URL-адрес обычно имеет следующую структуру: ,. Однако в зависимости от названия проекта этот URL-адрес может соответственно различаться. Тем не менее, базовый URL-адрес остается неизменным: ,.,Благодаря нашей реализации перезаписи URL-адресов в файле , дополнительные префиксы, такие как , или ,, не нужны при доступе к нашим URL-адресам. Мы тщательно настроили параметры нашего сервера, чтобы обеспечить плавную навигацию без этих префиксов.,Проще говоря, доступ к конечным точкам API нашего проекта можно осуществить непосредственно из базового URL: ,. Этот оптимизированный подход улучшает взаимодействие с пользователем и устраняет ненужную сложность этого проекта.,Чтобы упростить тестирование конечных точек API нашего проекта, мы можем использовать файл index.php, расположенный в папке API. Этот файл служит отправной точкой для нашего приложения и содержит все необходимые настройки.,Во-первых, мы просто распечатаем любой желаемый результат из файла index.php. Это помогает нам убедиться, что наша конечная точка работает правильно. Затем мы проверим конечную точку, получив доступ к URL-адресу: ,.,Кроме того, мы настроим подключение к базе данных, чтобы обеспечить бесперебойную связь между конечными точками нашего API и базой данных. Для удобства все необходимые конфигурации включены в файл ,. Импортировав этот файл в наш ,, управление конфигурациями и импортом становится проще.,Кроме того, важно отметить, что мы будем обеспечивать строгую типизацию во всей нашей кодовой базе. Это означает, что мы укажем типы данных, которые наши переменные и функции могут хранить или возвращать. Это помогает поддерживать согласованность и снижает вероятность ошибок в нашем коде.,Прежде чем приступить к шагам, описанным в этом разделе, необходимо тщательно просмотреть файл , этого проекта. Это предоставит вам подробные инструкции о том, как правильно настроить базу данных. В корне проекта вы найдете файл ,, содержащий необходимые таблицы для вашей базы данных. Просто следуйте инструкциям, приведенным в файле ,, чтобы импортировать и соответствующим образом настроить базу данных.,В папке src нашего проекта мы находим основные классы и шлюзы, включая необходимые подключения к базе данных для нашего проекта. За это отвечает файл data.php, уже настроенный для установления соединения с базой данных PDO.,Примечание. Перед использованием обязательно отрегулируйте или настройте переменные в файле среды , в соответствии с учетными данными вашей базы данных.,Код подготавливает наше приложение, выполняя несколько ключевых действий. Во-первых, он загружает необходимые файлы для плавной обработки ошибок и исключений. Затем он извлекает переменные среды из специального файла (,), где мы храним важные настройки, такие как информация базы данных. После этого он сообщает приложению отправить обратно данные в определенном формате (JSON). Наконец, он устанавливает соединение с базой данных, используя информацию из файла ,. Такая настройка гарантирует бесперебойную и безопасную работу нашего приложения.,Включите оператор echo, чтобы указать успешное соединение с базой данных, прежде чем возвращать объект ,. Это помогает проверить состояние соединения и обеспечить бесперебойную работу приложения. Например:,Перейдите к файлу ,, чтобы вызвать функцию , и проверить функциональность приложения. Важно отметить, что мы инициализировали наш класс базы данных в нашем загрузочном PHP-файле, что обеспечивает плавную интеграцию и работу.,Вызов функции , в файле , должен выглядеть следующим образом:,После успешной реализации подключения к базе данных и запуска нашего запроса вы можете ожидать следующего ответа:,Для эффективного управления пользовательскими данными мы реализуем минимальное интерфейсное решение, создав новый файл с именем , в корневом каталоге нашего проекта. Кроме того, мы представим таблицу стилей , для улучшения визуального представления страницы регистрации.,Мы установим соединение с нашей базой данных, что облегчит плавное добавление пользователей в таблицу пользователей в базе данных нашего колледжа. После успешной регистрации пользователя будет отображено подтверждающее сообщение, подтверждающее добавление пользователя в базу данных.,Структура нашей базы данных показана на изображении ниже:,Вы заслуживаете большого стакана сока за то, что дошли до этого момента, а теперь давайте перейдем к следующей части — созданию , с нуля!,В шаблоне нашего проекта файл , уже создан. Теперь давайте приступим к созданию нашего класса Jwt и реализуем логику кодирования и генерации токена ,.,Чтобы создать ,, нам нужно преобразовать наш заголовок, полезные данные и подпись в кодировку ,. Однако PHP не поддерживает стандарт ,, поэтому мы разработаем собственный метод кодирования , для выполнения необходимой операции кодирования.,Скопируйте следующий фрагмент кода и вставьте его в класс ,, расположенный в папке src.,Этот класс отвечает за кодирование токенов JWT с использованием схемы кодирования ,. Он включает в себя конструктор, который принимает ключевой параметр, который предположительно представляет собой секретный ключ, используемый для кодирования токенов. Кроме того, он содержит закрытый метод с именем ,, который выполняет операцию кодирования ,.,: метод , — это частная функция в классе Jwt. Он принимает строковый параметр, текст, и возвращает версию входной строки в кодировке ,. Метод сначала применяет стандартную кодировку base64 к входному тексту с помощью функции ,.,Затем он заменяет символы , (плюс), , (косая черта) и , (знак равенства) на , (дефис), , (подчеркивание) и пустую строку соответственно. Эта замена необходима для обеспечения совместимости со схемой кодирования ,, в которой используются символы, безопасные для URL. Наконец, метод возвращает строку в кодировке ,.,В целом, метод , обеспечивает важную функциональность для кодирования данных в токенах JWT с использованием схемы кодирования ,, которая обычно используется в реализациях JWT.,Вставьте следующий фрагмент кода в свой класс Jwt:,Во-первых, у нас есть класс ,. Этот класс помогает нам создавать токены ,. В конструкторе класса , мы указали секретный ключ. Этот секретный ключ важен для создания и проверки токенов в компоненте подписи.,Метод , — это то место, где происходит волшебство. Он берет некоторые данные (которые мы называем полезной нагрузкой) и превращает их в токен ,. Вот как это работает:,Метод , гарантирует, что данные закодированы в формате, подходящем для URL-адресов, что делает их безопасными для передачи через Интернет. В нашем классе Jwt этот метод используется внутри функции encode для кодирования разделов заголовка и полезных данных токена.,С учетом вышесказанного, давайте приступим к тестированию и посмотрим на наш первый токен ,, ура!,В нашем проекте папка , служит точкой входа для запросов. Теперь, когда мы реализовали алгоритм кодирования и создания токена ,, давайте приступим к его тестированию. Для этого мы создадим файл , в нашей папке API. В этом файле мы отправим запрос, содержащий имя пользователя и пароль пользователя, профилированного или созданного в нашем пользовательском интерфейсе ,. Мы передадим необходимые данные пользователя в формате JSON:,Пожалуйста, интегрируйте следующий фрагмент кода в файл ,, расположенный в нашем каталоге API:,Этот фрагмент кода служит внутренней логикой для обработки запросов на вход пользователей. Он начинается с включения файла , для инициализации основных компонентов. Затем он проверяет, является ли метод входящего запроса ,, и в противном случае возвращает ошибку «Метод не разрешен».,Затем он проверяет, что тип контента запроса — JSON, и в противном случае отвечает ошибкой «Неподдерживаемый тип носителя». Код приступает к декодированию данных JSON из тела запроса и проверяет их достоверность. Если данные JSON недействительны или в них отсутствуют ключи «имя пользователя» и «пароль», возвращается ошибка «Неверный запрос».,Прежде чем приступить к конечной точке входа в систему, нам необходимо настроить класс ,, который уже доступен в шаблоне нашего проекта в папке ,. Этот класс облегчает взаимодействие с пользовательскими данными в базе данных. Предоставленный фрагмент инициализирует класс и определяет метод , для извлечения пользовательских данных на основе предоставленного имени пользователя.,По ходу дела вы увидите необходимость этого.,Перейдите к файлу ,.,Хорошо, после небольшой рекламной паузы мы можем создать экземпляр класса с именем , и передать ему наше соединение ,. Затем мы извлекаем данные пользователя на основе предоставленного имени пользователя из экземпляра , с помощью метода ,. Если пользователь не найден (что указывает на неверную аутентификацию), мы возвращаем статус ответа , вместе с соответствующим сообщением об ошибке в формате JSON.,Мы проверяем предоставленный пароль на соответствие хешированному паролю, хранящемуся в данных пользователя. Если проверка пароля не удалась, мы возвращаем аналогичный статус , и сообщение об ошибке. Если аутентификация прошла успешно, мы создаем полезную нагрузку, содержащую идентификатор и имя пользователя. Впоследствии мы создаем токен ,, кодируя полезную нагрузку с помощью класса ,, экземпляр которого создается с помощью секретного ключа из переменных среды. Наконец, мы отвечаем сгенерированным токеном в формате JSON, предоставляющим доступ к защищенным ресурсам, что будет реализовано в следующем разделе.,Теперь, когда мы настроили конечную точку входа в систему, установили соединения с базой данных и реализовали алгоритм кодирования JWT, ничто не помешает нам получить наш первый токен JWT. Давайте приступим к тестированию нашего приложения, выполнив следующие шаги:,Вуаля! Вот так мы получаем наш токен JWT!,Успешно сгенерировав токен JWT, давайте теперь рассмотрим, как мы можем защитить наши ресурсы и проверить содержимое токена путем его декодирования.,Вы обнаружите, что наши классы контроллера , и класс шлюза ,, расположенный в папке ,, уже настроены с использованием основных методов. Теперь все, что осталось, — это создать экземпляры этих классов в нашем ,, который будет служить точкой входа для наших запросов в папке API.,Для этого добавьте следующий фрагмент кода в файл ,, расположенный в папке API нашего проекта:,Как структурированы файлы на данном этапе:,Обратите внимание, что при тестировании конечной точки (,) на этом этапе вы получите следующий результат без каких-либо ограничений:,Мы устанавливаем собственную конечную точку URL-адреса для получения данных с помощью метода GET HTTP. URL-адрес , останется работоспособным благодаря конфигурации сервера, указанной в нашем файле .htaccess, расположенном в папке API. При выполнении запросов к этому URL-адресу мы будем включать наш токен в заголовок, используя стандартный заголовок запроса HTTP-авторизации, придерживаясь формата токена-носителя:,Разрешение: на предъявителя,В нашей папке src мы настроили класс Auth, в котором создадим метод проверки токена JWT. Этот метод проверяет, указан ли токен в заголовке HTTP, и декодирует его.,При настройке функциональности декодирования в классе ,, как мы это делали с методом кодирования, мы обеспечим, чтобы наш класс ,, расположенный в папке , нашего проекта в файле ,, справился с этой задачей. Для этого мы включим следующие фрагменты кода в наш класс , — новые методы — это методы , и ,, тем самым завершив его структуру. Окончательный код будет выглядеть следующим образом:,Метод ,отвечает за декодирование токена , в соответствующие компоненты заголовка и полезной нагрузки. Вот краткий обзор того, что он делает:,Метод , — это вспомогательная функция, используемая специально для декодирования строк, закодированных с использованием кодировки URL-адресов ,. Вот разбивка его функционала:,Таким образом, метод декодирования проверяет и извлекает полезную нагрузку из токена JWT, а метод base64URLDecode помогает декодировать строки, закодированные с использованием кодировки URL-адреса base64, обеспечивая целостность и точность декодированных данных.,Теперь, когда мы завершили настройку, давайте завершим наш класс ,. Крайне важно ограничить доступ к нашим конечным точкам без обязательного заголовка авторизации. Например, доступ к URL-адресу , должен быть ограничен, если необходимый заголовок авторизации отсутствует, а доступ к ресурсам должен быть запрещен, если URL-адрес неверен.,Для этого добавьте следующий фрагмент кода в начало вашего файла ,, который служит точкой входа для доступа к нашим данным об учащихся. Вставьте этот код после импорта файла конфигурации ,.,В этом фрагменте показано, как мы извлекли путь из запрошенного URI с помощью функции ,, изолируя конечную точку, к которой обращается пользователь. Затем разбиваем путь на сегменты с помощью функции ,, что позволяет нам идентифицировать запрошенный ресурс. Если запрошенный ресурс не ,, что указывает на недопустимую конечную точку, код отвечает кодом состояния ,, сигнализируя, что запрошенный ресурс не существует. Это гарантирует доступ только к действительным конечным точкам, предотвращая несанкционированный доступ к ресурсам нашего API.,Примечание. Чтобы убедиться, что наш проект работает должным образом, отправьте запрос на конечную точку , по адресу ,.,Этот запрос поможет нам убедиться, что наш API правильно настроен и способен получать все данные учащихся.,Мы установили собственный URL-адрес, но очень важно убедиться, что токен JWT, указанный в заголовке, действителен. Для этого мы будем использовать класс Auth, который уже доступен в папке src нашего проекта. Этот класс, предоставленный в шаблоне нашего проекта, поможет обеспечить целостность токена JWT.,Этот класс отвечает за обработку аутентификации токенов ,. Внутри класса у нас есть метод-конструктор, который инициализирует объект , экземплярами двух других классов: , и ,.,Прекрасно! Давайте разберем фрагмент кода более подробно и повествовательно:,В предоставленном фрагменте кода PHP мы определили класс с именем ,. Этот класс отвечает за обработку аутентификации токенов ,. Внутри класса у нас есть метод-конструктор, который инициализирует объект Auth экземплярами двух других классов: , и ,.,Метод конструктора позволяет классу , взаимодействовать с пользовательскими данными через класс , и обрабатывать токены , с помощью класса ,.,Далее у нас есть метод ,, задачей которого является проверка действительности токена ,, присутствующего в заголовке авторизации , входящих запросов.,В методе , код сначала проверяет, правильно ли отформатирован заголовок авторизации и содержит ли действительный токен ,.,Если заголовок авторизации неполный или неправильно отформатирован, метод возвращает ответ 400 Bad Request вместе с сообщением, указывающим на проблему.,Затем код пытается декодировать токен ,, используя метод , класса ,. Если процесс декодирования завершается неудачей из-за недопустимой подписи или любого другого исключения, возвращаются соответствующие коды ответов HTTP и сообщения об ошибках.,Если токен JWT успешно декодирован без каких-либо исключений, метод возвращает ,, указывая, что процесс аутентификации прошел успешно.,Метод , гарантирует, что входящие запросы содержат действительный токен , в заголовке авторизации, и корректно обрабатывает различные сценарии ошибок, предоставляя соответствующую обратную связь клиентам, взаимодействующим с API.,Теперь, когда мы закончили настройку наших методов, давайте добавим экземпляры наших классов, чтобы обеспечить защиту наших ресурсов от неавторизованных пользователей.,После того как мы включили предоставленный фрагмент в наш ,, очень важно наблюдать за различными сценариями, которые происходят при доступе к нашей конечной точке API по адресу ,.,Получив доступ к этому URL-адресу, мы можем стать свидетелями нескольких возможных результатов, каждый из которых указывает на различное состояние или функциональность нашего приложения. Эти результаты могут включать в себя:,Изучая эти результаты, мы можем получить представление о функциональности и надежности нашего API, гарантируя, что он ведет себя должным образом и обеспечивает соответствующие ответы на различные типы запросов и сценариев., , ,После настройки JWT перед нами открывается совершенно новый мир. Вы можете поэкспериментировать с нашим API, создав собственные URL-адреса для конкретных задач, таких как поиск учащихся по имени или предоставление пользователям возможности создавать и обновлять свои собственные профили учащихся, отслеживая , пользователя. Вы можете использовать различные методы HTTP, такие как ,, ,, ,и ,, для эффективного управления данными. Хотя в этой статье рассматриваются основы, существует множество возможностей, которые предстоит изучить, когда дело доходит до создания надежного API.,Токены JWT предоставляют удобный и эффективный способ аутентификации и авторизации в веб-приложениях. Однако важно понимать, что они не являются абсолютно надежными. Очень важно избегать размещения конфиденциальной информации в компоненте полезных данных токена, поскольку полезные данные обычно имеют кодировку base64URLEn и могут быть легко декодированы. Кроме того, секретный ключ, используемый для подписи токена, должен храниться в скрытом виде и никогда не раскрываться публичной информации, поскольку он может поставить под угрозу безопасность системы.,В токенах JWT заголовок, полезная нагрузка и подпись имеют кодировку Base64URLE, что обеспечивает совместимость с URL-адресами и безопасную передачу через Интернет. Однако важно отметить, что у токенов JWT должен быть срок действия, чтобы снизить риск неправильного использования токена. В следующей части мы рассмотрим, как реализовать срок действия токена и ввести токены обновления для повышения безопасности нашей системы аутентификации.,Мы изучили реализацию веб-токенов JSON (JWT) и научились их использовать. Однако сохраняется серьезная проблема безопасности: наши токены, в данном контексте называемые токенами доступа, в настоящее время могут иметь неограниченный доступ к нашим ресурсам. Такая практика не соответствует отраслевым стандартам. Чтобы повысить безопасность, мы должны реализовать истечение срока действия токенов для наших JWT. Кроме того, рекомендуется использовать систему с двумя токенами, включающую токен обновления вместе с нашим токеном доступа.,Мы сосредоточимся на реализации токенов доступа и токенов обновления. Любые необходимые дополнения к нашему проекту или структуре базы данных будут вноситься по мере реализации.,Давайте приступим прямо к делу!,Токены доступа должны иметь механизм истечения срока действия. Нам нужно, чтобы срок действия наших токенов JWT автоматически истекал через короткий период времени, чтобы пользователи запрашивали новый токен по истечении срока его действия.,Предлагать пользователям входить в систему каждую минуту после истечения срока действия токена не удобно для пользователя. Вместо этого мы можем выдать токен обновления. Токен обновления обычно имеет более длительный срок действия, чем токен доступа. По истечении срока действия токена доступа клиент может использовать токен обновления для получения нового токена доступа. Мы добавим конечную точку для клиента, чтобы беспрепятственно обновлять токен доступа.,Продолжая с того места, на котором мы остановились, теперь мы создадим конечную точку обновления в нашей папке API. Как мы знаем, эта конечная точка служит нашей точкой входа для обработки запросов, связанных с обновлением токена, и будет называться ,.,Он проверяет, является ли метод входящего запроса , в противном случае он отвечает кодом состояния , и разрешает только запросы POST. Затем скрипт анализирует данные JSON из тела запроса, гарантируя, что они содержат ключ «токена». Если токен отсутствует, он отвечает кодом состояния 400 и сообщением JSON, указывающим на отсутствие токена. Наконец, сценарий инициализирует объект Jwt секретным ключом из переменных среды для дальнейшей обработки токена.,Прежде чем приступить к настройке конечной точки обновления, мы создадим класс , для обработки операций, связанных с обновлением токенов. Класс , включает методы для создания, удаления, получения и управления токенами обновления с истекшим сроком действия в нашей базе данных.,Класс , использует PDO-соединение и секретный ключ для хеширования токенов. Его конструктор инициализирует соединение с базой данных и переменные секретного ключа. Метод create генерирует хеш для токена и вставляет его в таблицу , вместе со сроком его действия. Метод удаления удаляет токен из базы данных на основе его хеш-значения. Метод , получает сведения о токене на основе его хеша. Наконец, метод , удаляет токены с истекшим сроком действия из базы данных, обеспечивая эффективное управление токенами.,В целом класс , предоставляет необходимые функциональные возможности для безопасного обслуживания и обработки токенов обновления в нашем веб-приложении.,Из фрагмента кода, предоставленного для нашего класса ,, видно, что в нашу базу данных была включена новая таблица. Мы обновили наш файл ,, чтобы учесть это изменение. Пожалуйста, импортируйте обновленный файл SQL в свою базу данных, следуя процессу, описанному в первой части этой статьи.,Кроме того, был представлен новый класс исключений ,. Обязательно обновите структуру или файлы вашего проекта соответствующим образом, чтобы включить эту новую обработку исключений. Это гарантирует, что ваш проект будет оставаться актуальным и соответствовать последним изменениям в управлении токенами.,Прежде чем мы закончим настройку конечной точки обновления для получения нового токена доступа после истечения срока действия, давайте интегрируем получение нашего токена обновления и токена доступа в нашу конечную точку входа в систему. У нас есть класс , для управления токенами обновления, и мы создадим файл , в нашей папке API для создания токена, который будет использоваться как в конечных точках обновления, так и в конечных точках входа. Такой подход обеспечивает простой и унифицированный процесс управления токенами в нашем приложении.,Основное различие между токеном обновления и полезными данными (утверждениями маркеров доступа) заключается в том, что полезные данные содержат подробные сведения о пользователе, такие как идентификатор и имя, а срок их действия короче (20 секунд) по соображениям безопасности. С другой стороны, токен обновления содержит только идентификатор пользователя и имеет более длительный срок действия (5 дней), что позволяет обеспечить более длительную аутентификацию без необходимости частого входа в систему. Такое разделение токенов и сроков их действия повышает безопасность и удобство пользователей в системах аутентификации на основе токенов.,Затем код приступает к проверке метода HTTP-запроса, гарантируя, что для конфиденциальных операций, таких как обработка токенов, принимаются только запросы ,. Эта проверка важна, поскольку помогает предотвратить несанкционированный доступ и обеспечивает безопасность процессов аутентификации.,Затем код извлекает и декодирует данные JSON из тела запроса, в частности, ища ключ «токена». Этот токен имеет решающее значение для аутентификации и контроля доступа в приложении. Если токен отсутствует, код отвечает сообщением об ошибке, подчеркивая важность включения действительных токенов для безопасного доступа.,Декодированный токен затем передается экземпляру, для декодирования его полезных данных и проверки его подлинности. Этот шаг имеет решающее значение, поскольку он проверяет целостность токена и гарантирует, что он не был подделан или подделан.,Кроме того, код взаимодействует с , для управления токенами обновления, которые играют жизненно важную роль в безопасном создании токенов доступа. Токены обновления позволяют получать новые токены доступа, не требуя от пользователя повторного входа в систему, что повышает удобство работы пользователя и обеспечивает постоянный доступ к ресурсам.,Когда пользователь входит в систему через конечную точку входа, ему предоставляются два важных токена: токен доступа и токен обновления. Токен доступа предоставляет немедленный доступ к ресурсам, а токен обновления служит инструментом долгосрочной авторизации. Если срок действия токена доступа истекает, токен обновления передается в конечную точку обновления. Это действие запускает создание нового токена доступа, который, в свою очередь, создает новый токен обновления. Этот процесс образует надежный и безопасный механизм, обеспечивающий непрерывный доступ к ресурсам при сохранении высокого уровня безопасности и удобства пользователя.,Из проанализированных фрагментов кода и объяснений, касающихся управления токенами, механизмов аутентификации и использования токенов обновления в веб-приложении, можно сделать несколько ключевых выводов.,Во-первых, аутентификация на основе токенов, особенно с использованием веб-токенов JSON, предлагает безопасный и эффективный способ управления процессами аутентификации и авторизации пользователей. JWT инкапсулируют пользовательскую информацию в компактном формате и имеют цифровую подпись, что обеспечивает ее целостность и подлинность.,Во-вторых, реализация токенов доступа и токенов обновления повышает безопасность и удобство работы пользователей. Токены доступа обеспечивают немедленный доступ к ресурсам и имеют короткий срок действия, что повышает безопасность, ограничивая удобство их использования в случае несанкционированного доступа. С другой стороны, токены обновления имеют более длительный срок действия и позволяют пользователям получать новые токены доступа без повторной аутентификации, тем самым повышая удобство пользователя.,Кроме того, строгое соблюдение типизации, правильная проверка методов HTTP-запросов и проверка формата токена являются важнейшими элементами обеспечения устойчивости и надежности систем аутентификации на основе токенов. Эти методы помогают предотвратить распространенные уязвимости, такие как попытки несанкционированного доступа, подделка токенов и использование недействительных токенов.,В целом, сочетая методы безопасного управления токенами, эффективные механизмы аутентификации и соблюдение лучших практик кодирования, веб-приложения могут достичь высокого уровня безопасности, удобства для пользователя и устойчивости к потенциальным угрозам.,Полный код смотрите ,."
Python: Преобразование градусов в радианы,"Преобразование градусов в радианы помогает сделать математические и программные вычисления более точными. В Python знание радианов важно для тригонометрии, делая вычисления более плавными и точными. Поэтому в этой статье мы узнаем, как конвертировать данные из градусов в радианы, обсуждая различные методы с помощью кода. Итак, начнем!, — это единицы, которые мы используем для измерения углов, подобно тому, как мы измеряем время на часах. Полный круг разделен на 360 частей, каждая из которых называется градусом. Например, если вы повернетесь на четверть круга, вы повернетесь на 90 градусов., — это еще один способ измерения углов, но он немного другой. Вместо того, чтобы делить круг на 360 частей, таких как градусы, мы измеряем углы в терминах длины дуги круга, которую этот угол отсекает. Например, если вы идете по краю круга радиусом 1 метр и оказываетесь на расстоянии 1 метра от того места, с которого начали, вы прошли угол в 1 радиан.,Вот ключевое соотношение между градусами и радианами: в полном круге ,, а в полном круге ,. Итак, ,.,Мы конвертируем градусы в радианы, потому что радианы обычно используются в математических и научных расчетах. Триггерные функции, такие как синус, косинус и тангенс, лучше всего работают с радианами. Использование радианов делает вычисления с использованием этих функций более простыми и точными. Радианы тесно связаны с основными математическими понятиями, такими как круги и углы. Они появляются во многих физических и инженерных уравнениях, поскольку естественным образом соответствуют этим идеям.,Теперь, когда мы познакомились с понятиями градусов и радиан, давайте посмотрим, как мы можем конвертировать градусы в радианы с помощью Python. Внимательно соблюдайте следующие методы.,Мы можем использовать данные и передать их в формулу для расчета угла.,Этот код получает от пользователя угол в градусах, преобразует его в радианы с помощью формулы и печатает как исходные градусы, так и их эквивалент в радианах.,Мы также можем добиться результатов, используя функцию ,, которая является частью библиотеки ,. Давайте посмотрим, как это сделать.,Этот код получает от пользователя угол в градусах, преобразует его в радианы с помощью функции ,, а затем печатает как исходные градусы, так и их эквивалент в радианах.,В библиотеке Python NumPy есть функция ,, которая помогает конвертировать градусы в радианы. Это один из лучших способов сделать это.,Этот код принимает угол в градусах в качестве входных данных, преобразует его в радианы с помощью NumPy, а затем выводит как исходные градусы, так и преобразованные радианы.,Мы также можем работать с несколькими углами, принимая входные данные массива для нескольких точек данных. Как здесь:,Код разбивает входные данные на отдельные углы, преобразует каждый угол в число и сохраняет их в массиве. После этого он преобразует углы из градусов в радианы и выводит как исходные градусы, так и соответствующие им радианы.,Мы также можем преобразовать углы в радианах в градусы, используя функцию , в Python. Давайте посмотрим, как:,Мы подошли к концу этой статьи. Я надеюсь, что понятия радиан и градусов хорошо усвоились вами. В этой статье мы рассмотрели три основных способа преобразования значений, заданных в градусах, в радианные углы. Кроме того, мы также изучили, как работать с несколькими значениями."
Округление чисел в Python пятью способами,"Округлять числа — значит упрощать их, удаляя лишние десятичные части. Это важно, потому что упрощает математику и помогает нам лучше понимать и работать с числами. В этой статье мы обсудим, как можно округлять числа с помощью простых функций в NumPy в Python. Итак, давайте начнем.,Функция , изменяет число или группу чисел до ближайшего целого числа или определенного количества знаков после запятой.,Основной синтаксис выглядит следующим образом:,Здесь:,Как округляется:,Если десятичная часть числа меньше 0,5, оно округляется в меньшую сторону. Если десятичная часть 0,5 или больше, то округляется в большую сторону.,Давайте используем это в коде:,Работа:,Выходные данные:, - это еще одна функция библиотеки NumPy, которая помогает округлять числа до ближайшего целого числа или целой цифры.,Синтаксис функции выглядит следующим образом:,Здесь:,Работа:,Всегда отбрасывается десятичная часть и округляется до меньшего целого числа. В случае положительных чисел он отсекает десятичную часть и превращает их в меньшее целое число. Для отрицательных чисел он движется к нулю и становится ближайшим меньшим целым числом.,Давайте разберемся с кодом:,Этот код делает следующее:,Выходные данные:,Функция , принимает на вход число или массив чисел и округляет их до ближайшего целого числа, которое больше или равно исходному числу.,Её синтаксис выглядит следующим образом:,Здесь:,Принцип работы:,Всегда выполняется переход к следующему большему целому числу, игнорируя десятичную часть. Для положительных чисел он округляет в большую сторону. Для отрицательных чисел он переходит к следующему целому числу, ближайшему к нулю.,Давайте реализуем это с помощью кода:,Работа этого кода аналогична двум предыдущим, за исключением того, что он округляет каждое число до ближайшего целого числа.,Выходные данные:,Функции , и , могут быть довольно запутанными, верно? Не волнуйтесь, у нас есть трюк, который поможет вам разобраться!,Функция , берет число или группу чисел и отсекает десятичную часть, оставляя только целую часть.,Основной синтаксис выглядит следующим образом, в качестве входных данных используется массив:,Как это работает:,Просто обрезается десятичная часть числа без округления. Всегда стремится к нулю. Для положительных чисел сохраняет целую часть. Для отрицательных чисел сохраняется целая часть и знак минус.,Давайте используем это в коде:,Этот код принимает на вход десятичные числа, превращает их в массив, а затем удаляет десятичную часть, чтобы оставить только целую часть, используя ,.,Выходные данные:,Функция , округляет вводимые данные до заданного количества десятичных знаков. Она похожа на , в Python, но дает больше контроля над точностью округления.,Синтаксис для нее следующий:,Здесь:,Как это работает:,Она округляет вводимое число до ближайшего значения с указанным количеством десятичных знаков. Если десятичная часть находится ровно на полпути между двумя округленными значениями, , округляет до ближайшего чётного значения для более сбалансированного подхода к округлению.,Давайте реализуем это в коде:,Этот код принимает на вход десятичные числа, формирует их в массив и округляет каждое число до ближайшего целого числа с помощью функции ,.,Выходные данные:,Упрощение чисел помогает в математике. В этой статье мы рассмотрели, как округлять числа в Python с помощью NumPy. Функция , округляет до ближайшего целого или заданного десятичного знака, , округляет вниз, , округляет вверх, , отсекает десятичные знаки, а , обеспечивает точное округление. Надеюсь, это поможет вам разобраться с округлением чисел!"
Исследователи проводят опрос о системах дедупликации,"Исследование, опубликованное в Международном журнале Grid and Utility Computing, рассматривает проблему дублирования данных в компьютерных системах хранения. Решение этой проблемы может повысить эффективность хранения данных, системную производительность и снизить потребность в ресурсах.,Авторы статьи, Амдевар Годавари и Чапрам Судхакар из Национального технологического института Варангала в Индии, объясняют, как рост Интернета вещей (IoT) и объема данных в различных областях привели к увеличению спроса на компьютерные хранилища.,Прогнозы показывают, что к 2025 году объем хранимых данных может достигнуть 175 зеттабайт, при этом около 75% данных могут быть дубликатами. Это приводит к неэффективному использованию хранилищ и снижению производительности систем.,Исследователи предлагают два подхода к решению этой проблемы. Первый — сжатие данных, включающее выявление и удаление дубликатов. Второй — использование алгоритмов и машинного обучения для идентификации избыточных данных и их удаления. Их тесты показывают, что фрагментация переменного размера может быть эффективнее фрагментации фиксированного размера, но требует больше времени. Однако использование машинного обучения может повысить эффективность этого подхода."
Как найти произведение элементов массива в Python (3 простых способа),"Нахождение произведения элементов массива в Python действительно важно для математических задач, программирования, анализа данных и выполнения научных задач. Наша цель в этой статье — добиться этого. Здесь мы обсудим несколько простых способов расчета произведения. Мы рассмотрим предопределенную функцию в NumPy, которая поможет нам в этом, а также подробности параметров и примеры.,Чтобы найти произведение элементов массива, необходимо перемножить все числа в массиве. Эта задача необходима для программирования, поскольку она помогает при вычислении факториала, кумулятивного произведения или выполнении матричных операций. Давайте рассмотрим различные методы поиска произведения элементов массива в Python.,Сначала мы увидим, как можно использовать базовую логику с помощью цикла и реализовать идею получения произведения элементов массива.,В этом примере мы создаем функцию под названием ,, чтобы найти сумму при умножении всех чисел в списке. Начинаем с 1, затем просматриваем каждое число в списке, умножая их вместе. После этого мы получаем результат. Затем мы используем эту функцию со списком чисел и распечатываем то, что получаем.,Библиотека Python NumPy содержит функции для каждого вычисления, упрощающие задачу. Он включает функцию ,, которая перемножает все элементы массива.,Давайте разберемся в значении всех параметров и воспользуемся ими в приведенных примерах.,В этом базовом примере мы просто используем функцию , для данного массива.,Здесь мы укажем параметр типа данных ,. Он вычислит произведение всех элементов массива с указанным типом данных.,Теперь давайте посмотрим, как мы можем сохранить размеры вместе с результатами ,. Если параметр , имеет значение ,, выходные данные сохраняют те же размеры, что и исходный массив, даже если некоторые из них имеют только один элемент. Таким образом, выходной массив сохраняет форму входного массива.,Давайте попробуем указать ось для умножения. Он рассчитает произведение по разным осям.,Когда мы вычисляем произведение элементов по оси 0 (столбцов) массива, оно умножает элементы вдоль каждого столбца отдельно. Итак, , будет [10, 10].,Когда мы вычисляем произведение элементов по оси 1 (строк) массива, оно умножает элементы вдоль каждой строки отдельно.,Функция , вычисляет произведение элементов массива, игнорируя любые значения NaN (не число). Это полезно, когда у нас есть наборы данных с отсутствующими или недопустимыми значениями, что обеспечивает правильные вычисления. Функция работает аналогично ,, но пропускает значения NaN во время вычислений.,Давайте рассмотрим пример, иллюстрирующий использование функции , со всеми параметрами.,Произведение массива вычисляется по оси 0, игнорируя значения NaN.,В этом блоге мы обсудили наиболее часто используемые и простые способы вычисления произведения массивов. Мы увидели, как использовать различные параметры, такие как указание оси расчета и указание типа данных. Я надеюсь, что это прояснит вам эту концепцию."
Как добавить аутентификацию Firebase в ваше приложение NodeJS,"Безопасность является абсолютной необходимостью для любого приложения, независимо от того, создаете ли вы простой проект или потенциальный стартап.,Поэтому важно внедрить надежные системы аутентификации, чтобы не только защитить пользовательские данные, но и предоставить пользователям персонализированный опыт.,В большинстве случаев мы склонны создавать системы аутентификации с нуля. Однако альтернативным и часто более эффективным методом является использование существующих инструментов и услуг, которые уже соответствуют отраслевым стандартам.,Таким образом, вам не нужно беспокоиться о мельчайших деталях реализации безопасности, а вы можете сосредоточить свои усилия на создании основных функций ваших приложений.,В этом руководстве мы рассмотрим аутентификацию Firebase и покажем вам пошаговый процесс защиты приложений Node.js путем интеграции поставщиков аутентификации Firebase.,Firebase Authentication предлагает простой в использовании SDK, который упрощает процесс добавления функций аутентификации в ваши приложения Node.js. Прелесть этого SDK заключается в его способности абстрагировать сложные реализации безопасности, такие как хеширование паролей и многофакторная аутентификация, что позволяет вам сосредоточиться на создании основных функций вашего приложения.,SDK поддерживает несколько поставщиков аутентификации, включая комбинации электронной почты и пароля, социальных сетей, таких как Google, и т.д. Это гарантирует, что ваши приложения удовлетворят разнообразные требования пользователей, позволяя им проходить аутентификацию предпочтительным методом.,Прежде чем приступить к работе, убедитесь, что у вас есть следующее:,Имея эти предварительные условия, вы готовы погрузиться в проект. Начнем с создания проекта Firebase.,Чтобы начать, выполните следующие действия, чтобы настроить проект Firebase:,Вы успешно создали новый проект Firebase и зарегистрировали в нем веб-приложение. На следующем шаге вы узнаете, как настроить службу аутентификации Firebase в консоли разработчика.,После того как вы зарегистрировали свое приложение в Firebase, следующим шагом будет настройка службы аутентификации Firebase.,На странице обзора вашего проекта выберите раздел «Authentication» и нажмите кнопку «Get started».,Firebase Authentication поддерживает несколько поставщиков аутентификации, однако в этом руководстве мы сосредоточимся на реализации собственного поставщика электронной почты и паролей для защиты вашего приложения Node.js.,На странице настроек аутентификации нажмите вкладку «Sign-in method», затем нажмите кнопку «Email/Password provider». Затем переключите кнопку «Enable». ,Обязательно также включите функцию «Email link». Позже мы будем использовать эту функцию для реализации функций проверки электронной почты и сброса пароля для системы аутентификации приложения Node.js.,Чтобы включить функцию ссылки по электронной почте, нажмите кнопку «Enable» в разделе ,, а затем нажмите «Save».  ,После сохранения изменений статус провайдера «email/password» изменится на «Enabled».,Если вы хотите добавить нового провайдера, просто нажмите кнопку «Add new provider».,Теперь, благодаря этим обновлениям, вы готовы приступить к коду и реализовать функцию аутентификации в своем приложении Node.js.,Теперь, прежде чем вы углубитесь в код, давайте рассмотрим цели. По сути, нам нужно создать API аутентификации Node.js на базе Firebase SDK. Это означает, что мы создадим различные маршруты вместе с их функциями-обработчиками, чтобы пользователи могли регистрироваться, входить в систему, выходить из системы, проверять свою электронную почту, а также сбрасывать свои пароли.,Вместо того, чтобы создавать эту функциональность с нуля, мы воспользуемся поставщиком электронной почты и паролей Firebase и методами аутентификации пользователей SDK.,Для начала сначала создайте локальную папку для хранения файлов вашего проекта. Затем измените текущий каталог на рабочий каталог проекта.,Далее инициализируйте npm, чтобы создать файл ,, в котором будут храниться зависимости проекта.  ,Теперь вам нужно установить пару пакетов для этого проекта. Для веб-сервера мы создадим приложение Express.js. Установите Express.js, а также эти дополнительные пакеты.,Пакет , позволяет вам получить доступ к Firebase SDK для Node.js и его функциям. Мы также будем использовать ,, который предоставляет серверный интерфейс для взаимодействия со службами Firebase, включая аутентификацию.,Теперь откройте папку проекта в предпочитаемом вами редакторе кода, чтобы начать разработку.,Давайте добавим конфигурации Firebase SDK в ваше приложение Node.js. Для этого в корневой папке проекта создайте папку с именем ,, а также файл , — этот файл будет содержать переменные среды вашего приложения.,Внутри папки , создайте новый каталог ,. Внутри каталога конфигурации добавьте новый файл с именем ,.,Теперь скопируйте и вставьте объектный код конфигурации Firebase SDK из консоли Firebase в свой файл , следующим образом:,Затем в , файл включите следующий код для инициализации Firebase в вашем приложении Node.js (Express):  ,С помощью этого кода вы успешно инициализировали Firebase SDK в своем приложении. Теперь давайте создадим сервер Express. В каталоге , создайте , файл и включите следующий код:  ,Запустите сервер разработки:,Вы должны увидеть вывод журнала, показывающий, что сервер прослушивает порт 5000.,Благодаря этим изменениям вы успешно создали приложение Express и инициализировали Firebase в своем проекте для доступа к его функциям.,Перейдем к реализации функций аутентификации. Нам необходимо определить конечные точки, а также их функции-обработчики для управления функциями аутентификации.,Есть несколько вещей, которые вам нужно знать о том, как Firebase SDK обрабатывает аутентификацию. Firebase SDK предоставляет методы, прикрепленные к модулю ,, для управления различными рабочими процессами аутентификации.,Поскольку мы реализуем поставщика «Email/Password», мы в первую очередь сосредоточимся на методах, которые позволяют нам создавать нового пользователя с адресом электронной почты и паролем, входить в систему, выходить из системы и выполнять задачи управления учетными записями пользователей, такие как как проверка электронной почты и сброс пароля.,Чтобы получить доступ к модулю , и его методам, внесите в файл , следующее дополнение:,Обязательно экспортируйте их следующим образом:,Начнем с реализации функций-обработчиков, которые управляют процессами аутентификации пользователей.,Вам необходимо определить функции контроллера, которые будут управлять запросами на регистрацию, вход или выход пользователей из системы. Для этого создайте папку ,. Внутри этой папки добавьте новый файл с именем ,, а затем сначала импортируйте следующие методы:,Каждый из методов аутентификации принимает ряд параметров, включая обязательный объект ,, который необходимо включать и передавать вместе с запросами. Чтобы получить доступ к этому объекту, добавьте этот код:  ,Этот объект важен для методов аутентификации, поскольку он обеспечивает безопасный и изолированный контекст для состояния аутентификации каждого пользователя. Передавая его вместе с запросами аутентификации на серверную часть Firebase, вы гарантируете, что операции выполняются в правильном контексте аутентификации, предотвращая несанкционированный доступ или манипулирование пользовательскими данными.,Теперь есть несколько способов определить функции контроллера. По сути, очень важно, чтобы кодовая база была лаконичной и читабельной.,В этом случае вы можете создать каждую функцию-обработчик независимо или, альтернативно, объединить все связанные обработчики в класс и экспортировать сам экземпляр.,Затем вы можете подключиться к методам класса для доступа к функциям обработчика. Для этого начните с создания класса контроллера. Затем определите функцию-обработчик регистрации пользователя:,Чтобы зарегистрировать пользователя, этот код проверит наличие адреса электронной почты и пароля в теле запроса.,Если это предусмотрено, он использует метод Firebase , для создания новой учетной записи пользователя (Firebase также предоставляет выделенное облачное хранилище для управления этими данными — вы можете просмотреть зарегистрированных пользователей на консоли. После успешной регистрации вызывается метод Firebase , для отправки письма с подтверждением.,Обратите внимание, что мы включаем проверку электронной почты в конечную точку регистрации. Существуют различные подходы к этому, особенно если у вас есть клиент, использующий такой API; все зависит от конкретных требований вашего приложения.,Например, обычным сценарием на стороне клиента может быть следующий: пользователь предоставляет свои учетные данные для регистрации, затем он перенаправляется на новую страницу, или вы обновляете компонент для отображения запроса на подтверждение электронной почты, где пользователь предоставляет свой адрес электронной почты.,Затем Firebase выполняет проверку, отправляя пользователю ссылку для подтверждения на его электронную почту, например эту:,Поэтому в идеале вы можете разделить обработчик регистрации и функцию обработчика проверки электронной почты, а затем использовать их отдельно по мере необходимости.,Но в этом случае, как только пользователь зарегистрирован, мы сразу же вводим данные аутентификации пользователя в тексте ответа и отправляем ссылку для подтверждения на адрес электронной почты. Как только они нажмут на это письмо, они должны быть проверены (эта логика обрабатывается Firebase).,Также следует отметить, что по умолчанию при использовании этого метода , он внутренне выполняет операцию входа в систему после успешного создания пользователя.,Такое поведение является выбором дизайна в Firebase Authentication, обеспечивающим согласованность и простоту процесса аутентификации. Это гарантирует, что вновь созданный пользователь пройдет проверку подлинности и сможет немедленно получить доступ к защищенным ресурсам или выполнить другие действия без необходимости дополнительного входа в систему.,Теперь, чтобы обрабатывать входы пользователей в тот же класс, добавьте следующий обработчик входа. Мы будем использовать этот метод ,, чтобы позволить пользователям входить в систему, используя свои учетные данные:,В этом коде происходит несколько вещей. Во-первых, он обрабатывает вход пользователя, извлекая адрес электронной почты и пароль из тела запроса, гарантируя, что оба они предоставлены.,При успешной попытке входа в систему он извлекает токен аутентификации пользователя (Firebase по умолчанию обрабатывает процесс создания токена) из объекта пользователя, возвращаемого в теле ответа, и сохраняет его в файле cookie только для HTTP с именем ,.,Почему это важно? Что ж, защита ресурсов вашего приложения имеет первостепенное значение. Это означает, что вам необходимо иметь возможность гарантировать, что вы разрешаете доступ только проверенным и законным пользователям.,Firebase SDK обрабатывает генерацию токенов JWT, предоставляя вам различные токены, включая токены доступа и обновления в объекте , в теле ответа.,В этом случае мы устанавливаем файл ,, содержащий информацию об аутентифицированном пользователе в cookie. Всякий раз, когда пользователь выполняет последующие запросы, токен будет включаться в запросы, и вы сможете через промежуточное программное обеспечение получить доступ к токену и проверить его.,Однако важно отметить, что это всего лишь один из способов реализации аутентификации пользователя и защиты ресурсов вашего приложения. Вы можете еще больше повысить безопасность своего приложения, внедрив дополнительные меры, такие как управление доступом на основе ролей.,Теперь, чтобы обрабатывать процесс проверки токена, вам необходимо определить функцию промежуточного программного обеспечения, которая будет проверять токен.,Firebase предоставляет для этого инструменты, но сначала требуется учетная запись службы — файл JSON, содержащий учетные данные и информацию, необходимую для межсерверного взаимодействия со службами Firebase. Это предоставит вашему приложению Node.js доступ к административным функциям Firebase, включая проверку токенов.,Чтобы получить доступ к учетной записи службы, перейдите в консоль Firebase, щелкните значок «Settings» в верхнем левом углу консоли разработчика и выберите «Project Settings». Затем выберите вкладку «Service Account» и нажмите «Generate new private key».,Скопируйте и вставьте загруженный файл JSON из папки загрузки в каталог , вашего проекта и переименуйте его следующим образом: ,.,Затем в файле , включите следующий код:,Этот код инициализирует Firebase Admin SDK в приложении Node.js, обеспечивая административный доступ к службам Firebase, используя учетные данные учетной записи службы, загруженные из файла JSON.,Это гарантирует, что приложение имеет необходимые привилегии для программного взаимодействия и управления ресурсами Firebase, включая доступ и проверку токенов, включенных в последующие HTTP-запросы.,Обязательно экспортируйте экземпляр администратора в свой код.,Теперь создайте промежуточное программное обеспечение, которое будет проверять токены. Для этого создайте новый каталог , в папке , и внутри этой папки создайте новый файл , и включите следующий код:,Это промежуточное программное обеспечение будет проверять подлинность токенов, передаваемых в последующих запросах, обеспечивая безопасный доступ к защищенным маршрутам. Мы включим его в маршруты, требующие аутентификации.,Наконец, включите этот обработчик выхода из системы, чтобы выйти из системы и очистить файлы cookie токенов:,Эта функция эффективно выйдет из системы пользователя, очистит файл cookie токена доступа и отправит соответствующий ответ.,Теперь давайте реализуем функцию-обработчик, которая позволит пользователям управлять своими паролями и сбрасывать их. Firebase возьмет на себя все основные сложности: от создания ссылки для сброса электронной почты и ее отправки до обновления пароля.,Для этого включите этот контроллер , в класс контроллеров:,Метод , отправит электронное письмо для сброса пароля на указанный адрес электронной почты. Затем пользователи могут обновить свои пароли через страницу пользовательского интерфейса Firebase, отображаемую в браузере.  ,Теперь создайте новую папку ,. Внутри этой папки добавьте новый файл , со следующим содержимым:,Затем импортируйте объект маршрутов в файл , следующим образом:,Давайте приступим к тестированию функции аутентификации вашего API.,Перезапустите сервер разработки:,Существует несколько подходов к тестированию, которые можно использовать, чтобы убедиться в работоспособности API аутентификации. Одним из способов было бы автоматизировать тестирование с помощью модульных тестов с такими инструментами, как Jest и Supertest. Кроме того, вы можете использовать клиенты API, такие как Postman или расширение Thunder Client VS Code, для тестирования API.,В этом случае мы воспользуемся Postman для тестирования различных конечных точек. Для начала, предполагая, что вы хотите зарегистрировать нового пользователя, используя его адрес электронной почты и пароль, сделайте запрос POST и передайте эти значения в эту конечную точку: ,.,Вы должны получить сообщение об успешной регистрации вместе с сообщением о подтверждении электронной почты. Проверьте свой почтовый ящик на наличие электронного письма и нажмите предоставленную ссылку, чтобы подтвердить свой адрес электронной почты.,Хорошо, что Firebase предоставляет страницы пользовательского интерфейса по умолчанию для таких процессов. Однако, в зависимости от вашей реализации, вы можете настраивать страницы в соответствии с дизайном вашего приложения.,Теперь, используя те же учетные данные, отправьте POST-запрос к конечной точке ,, чтобы проверить конечную точку входа.  ,Как только пользователь успешно входит в систему со своими учетными данными, ему возвращается объект пользователя с различной информацией, специфичной для пользователя. Предполагая, что они подтвердили свой адрес электронной почты после регистрации, ответ будет содержать ключ , с истинным значением. Затем вы можете использовать эту информацию, чтобы предоставить им доступ к определенным функциям или ресурсам вашего приложения.,Более того, как только они войдут в систему, токен доступа будет установлен в файлах cookie следующим образом:,Как только это будет установлено, оно будет автоматически включаться в последующие запросы приложения на доступ к защищенным ресурсам.,Например, если вы хотите создать блог и отображать список сообщений для аутентифицированных пользователей, создайте новый файл ,. Затем определите следующий контроллер, который должен возвращать список сообщений пользователей:,Затем включите этот маршрут вместе с , созданным ранее промежуточным программным обеспечением для проверки токена, передаваемого вместе с запросами.  ,Таким образом, как только вы успешно войдете в систему и сделаете запрос GET для доступа к списку сообщений через эту конечную точку: ,, вы должны получить в качестве ответа следующие данные:,Помните, что это всего лишь базовая реализация. В идеале , должен попытаться получить доступ к ресурсам вашего приложения, включая данные в базе данных, и вернуть их пользователю в клиентском приложении.,Теперь, предполагая, что пользователь хочет сбросить свой пароль, Firebase , принимает объект , и адрес электронной почты в качестве параметров и, подобно методу проверки электронной почты, отправляет электронное письмо для сброса пароля, содержащее ссылку, которая позволяет вам получить доступ к странице пользовательского интерфейса сброса пароля.,Нажмите на ссылку, указанную в электронном письме для сброса пароля, чтобы получить доступ к странице пользовательского интерфейса сброса пароля по умолчанию Firebase, чтобы сбросить и сохранить новый пароль.,Обратите внимание: если вы хотите обновить пароль с помощью метода сброса пароля аутентификации Firebase, вам следует использовать метод POST HTTP для отправки запроса вместо метода PATCH. В идеале процесс сброса пароля Firebase обычно включает в себя следующие шаги:,В этом потоке клиент не обновляет определенный ресурс на сервере. Вместо этого клиент инициирует процесс сброса пароля, отправляя запрос POST с адресом электронной почты пользователя. Затем сервер запускает поток сброса пароля аутентификации Firebase, который полностью обрабатывается Firebase.,Однако этот метод , обычно используется, когда вы хотите обновить определенный ресурс на сервере, например данные профиля пользователя или определенный документ в базе данных. Однако в случае метода сброса пароля аутентификации Firebase на стороне сервера не обновляется какой-либо конкретный ресурс. Сервер просто действует как посредник, инициирующий процесс сброса пароля с помощью Firebase.,При аутентификации с использованием Firebase важно следовать лучшим практикам для обеспечения безопасности и эффективности систем аутентификации. Вот несколько ключевых моментов, которые следует учитывать:,В этой статье мы рассмотрели основные шаги по интеграции Firebase Authentication в приложение Node.js, включая реализацию функций регистрации пользователей, входа в систему, выхода из системы и сброса пароля с помощью Firebase Authentication SDK."
Создание компонента увеличителя изображений в React,"Создайте компонент увеличителя изображений в ReactJs. С помощью пошаговых инструкций и примеров кода вы узнаете, как повысить удобство работы пользователей, позволяя им увеличивать изображения, чтобы рассмотреть их поближе. Следуйте дальше, чтобы создать свой собственный настраиваемый компонент увеличителя изображений и повысить свои навыки веб-разработки!,Для начала давайте определим базовую структуру нашего компонента увеличителя изображений. Мы определим функцию компонента и установим его начальное состояние.,Далее давайте обработаем события мыши, чтобы управлять появлением лупы при наведении курсора на изображение.,Теперь давайте добавим элемент лупы и придадим ему стиль в зависимости от положения курсора и размеров изображения.,Мы сделали это. Вот полный код и демонстрация:,Вот и все! Мы успешно создали простой, но функциональный компонент лупы для изображений в React. Теперь пользователи могут наводить курсор на изображения, чтобы внимательно их рассмотреть, благодаря нашей интуитивно понятной функции лупы.,Не стесняйтесь настраивать и улучшать этот компонент в соответствии с вашими потребностями. Счастливого кодинга!"
Важность адаптивного дизайна и доступности (a11y) в React,"По мере развития веб-разработки значение адаптивного дизайна и доступности в приложениях React невозможно переоценить. В этом руководстве расширенного уровня мы углубимся в тонкости создания быстродействующих и доступных приложений React. Целью этой статьи является предоставление разработчикам знаний и инструментов, необходимых для освоения этих важнейших аспектов современной веб-разработки: от передовых методов реагирования до передовых практик обеспечения специальных возможностей. React стал доминирующей силой в веб-разработке, позволяя нам создавать динамические и интерактивные пользовательские интерфейсы. Но красивое приложение React — это только полдела. Наши творения должны быть доступными и отзывчивыми, чтобы по-настоящему сиять. В этом сообщении блога мы углубимся в мир адаптивного дизайна (RD) и специальных возможностей (a11y) в React, изучая, как создавать приложения React, которые подойдут каждому, независимо от устройства или способностей.,Адаптивный дизайн направлен на то, чтобы веб-контент плавно адаптировался к различным устройствам и размерам экрана, обеспечивая оптимальное качество просмотра для пользователей. С другой стороны, доступность направлена ​​на то, чтобы сделать веб-контент доступным для использования людьми с ограниченными возможностями, обеспечивая равный доступ к информации и функциям.,Хотя эти концепции могут показаться разными, у них есть общая цель: улучшение пользовательского опыта. И адаптивный дизайн, и доступность отдают приоритет гибкости, удобству использования и инклюзивности при проектировании и разработке.,Адаптивный дизайн означает способность веб-сайта или приложения адаптироваться и обеспечивать оптимальное качество просмотра на различных устройствах и размерах экрана. В React достижение отзывчивости предполагает использование принципов адаптивного дизайна, таких как гибкие макеты, медиа-запросы и гибкие сетки.,Доступность идет рука об руку с адаптивным дизайном, направленным на то, чтобы сделать цифровые возможности доступными для всех пользователей, включая людей с ограниченными возможностями. Это включает в себя учет зрительных, слуховых, двигательных и когнитивных нарушений, гарантируя, что каждый сможет эффективно воспринимать, понимать, перемещаться и взаимодействовать с веб-контентом.,React обеспечивает доступность благодаря таким функциям, как семантические элементы HTML, атрибуты ARIA и поддержка навигации с помощью клавиатуры. Кроме того, такие библиотеки, как React Aria и Reach UI, предоставляют компоненты, специально разработанные с учетом доступности, что дает разработчикам возможность создавать инклюзивный опыт без ущерба для функциональности или дизайна.,Семантические элементы HTML играют жизненно важную роль в создании доступного и хорошо структурированного веб-контента. В React использование JSX позволяет разработчикам легко создавать семантическую разметку. Использование таких элементов, как ,,,, ,, , и ,, помогает обеспечить четкую структуру документа, улучшить SEO и улучшить удобство сопровождения кода.,Кроме того, интеграция атрибутов ARIA, таких как роль, ,, , и ,, еще больше повышает доступность за счет передачи важной информации вспомогательным технологиям. Для интерактивных элементов, таких как кнопки и ссылки, использование тегов , или , вместе с соответствующими ролями ARIA гарантирует, что пользователи с ограниченными возможностями смогут эффективно перемещаться по контенту и взаимодействовать с ним.,Доступность клавиатуры имеет первостепенное значение для обеспечения того, чтобы пользователи могли перемещаться по приложению React и взаимодействовать с ним, используя только клавиатуру. Это включает в себя обеспечение логического порядка ,, реализацию стилей фокуса для пользователей клавиатуры и соответствующую обработку событий клавиатуры.,Правильное управление фокусом имеет решающее значение для обеспечения доступности клавиатуры. Такие методы, как динамическое управление состояниями фокуса, использование атрибута tabIndex и предотвращение непреднамеренных ловушек фокуса, обеспечивают плавную навигацию для пользователей клавиатуры. Сложные компоненты пользовательского интерфейса, такие как модальные окна и раскрывающиеся меню, должны иметь четко определенное поведение фокуса, чтобы предотвратить проблемы с доступностью.,Обеспечение доступности изображений и мультимедийного контента включает предоставление альтернативного текста, подписей, расшифровок и описаний. В React добавление замещающего текста к изображениям с использованием атрибута , в элементе , и предоставление доступных мультимедийных функций, таких как субтитры в видеоплеерах, повышает инклюзивность.,Формы являются неотъемлемой частью веб-приложений, и их доступность имеет первостепенное значение. Используйте соответствующие элементы формы (ввод, текстовое поле, выбор и т. д.) со связанными метками, инструкциями и атрибутами ,, такими как ,, чтобы направлять пользователей при взаимодействии с формой. Предоставляйте пользователям содержательные сообщения об ошибках и отзывы о проверке, особенно тем, кто использует программы чтения с экрана или навигацию с помощью клавиатуры.,Тестирование приложений с помощью программ чтения с экрана имеет решающее значение для обеспечения совместимости и удобства использования для пользователей, использующих вспомогательные технологии. Учитывайте, как компоненты будут восприниматься и управляться средствами чтения с экрана, и обеспечьте логичное представление контента и осмысленный порядок.,Понимание дерева доступности и его связи с DOM имеет важное значение. Компоненты React преобразуются в дерево доступности, используемое вспомогательными технологиями для передачи информации пользователям с ограниченными возможностями. Проверьте точность дерева доступности с помощью таких инструментов, как инструменты разработчика специальных возможностей Chrome, чтобы обеспечить соответствие целям доступности.,Динамические обновления контента, такие как SPA или изменения данных в реальном времени, должны учитывать последствия для доступности. Используйте динамические регионы ARIA (aria-live), чтобы объявлять о динамических изменениях контента пользователям программ чтения с экрана и соответствующим образом управлять фокусом во время обновлений контента.,Тщательное тестирование и проверка имеют решающее значение для выявления и решения проблем доступности. Используйте такие инструменты, как библиотека тестирования React, Jest и Axe-Core, для автоматического тестирования доступности. Проведите ручное тестирование с помощью программ чтения с экрана, навигации с помощью клавиатуры и различных конфигураций браузера, чтобы обеспечить всестороннюю оценку доступности.,Цветовой контраст играет ключевую роль в обеспечении доступности цифрового контента для пользователей с нарушениями зрения или нарушениями цветового зрения. В приложениях React обеспечение достаточного цветового контраста является ключевым аспектом создания инклюзивного пользовательского опыта. Давайте рассмотрим, почему цветовой контраст важен и как его эффективно реализовать.,Цветовой контраст — это разница в яркости или цвете между элементами переднего плана (текста или графики) и фона. Адекватный цветовой контраст имеет решающее значение для пользователей с плохим зрением или дальтонизмом, поскольку он повышает читаемость и удобство использования. Недостаточный цветовой контраст может затруднить или сделать невозможным восприятие контента этими пользователями.,Цветовой контраст играет ключевую роль в обеспечении доступности цифрового контента для пользователей с нарушениями зрения или нарушениями цветового зрения. В приложениях React обеспечение достаточного цветового контраста является ключевым аспектом создания инклюзивного пользовательского опыта. Давайте рассмотрим, почему цветовой контраст важен и как его эффективно реализовать.,Цветовой контраст — это разница в яркости или цвете между элементами переднего плана (текста или графики) и фона. Адекватный цветовой контраст имеет решающее значение для пользователей с плохим зрением или дальтонизмом, поскольку он повышает читаемость и удобство использования. Недостаточный цветовой контраст может затруднить или сделать невозможным восприятие контента этими пользователями., — это плагин ,, который предоставляет набор правил для реализации лучших практик специальных возможностей в коде JSX, обычно используемых в приложениях React. Это помогает разработчикам выявлять проблемы с доступностью на ранних этапах процесса разработки, продвигая упреждающий подход к обеспечению соответствия требованиям доступности., добавьте ""jsx-a11y"" в файл конфигурации ESLint (например, ,) в массив плагинов:,Чтобы ваши проекты React эффективно воплощали в себе адаптивный дизайн и доступность, рассмотрите следующие лучшие практики:,В заключение, интеграция практик адаптивного дизайна и доступности в разработку React — это не просто соблюдение стандартов; речь идет о создании инклюзивного, ориентированного на пользователя опыта, который находит отклик у разнообразной аудитории. Приняв эти принципы, разработчики могут создавать цифровые решения, которые не только визуально привлекательны, но и функционально надежны и доступны для всех."
Коробка — российский аналог Docker,"Приветствуем читателей DevGang!,«Коробка» — новая технология, созданная командой Александра Коробкина в качестве своеобразной альтернативы программного обеспечения Docker. Инновация создана с учётом новейших возможностей и национальной специфики.,Коробка, как и Docker, является платформой для автоматизации развёртывания и управления приложениями в средах с поддержкой контейнеризации. Главным признаком этих технологий является возможность сепарации приложения от его зависимостей с помощью блоков, иначе говоря, «коробок».,Преимуществами этой возможности являются независимость развёртывания приложений, минимизация вероятных ошибок и упрощение процесса внедрения приложения в производственную среду.,Российская технология имеет ряд уникальных преимуществ по сравнению с зарубежной версией. Мы перечислим три из них:,В качестве основного инструмента для создания Коробки Александром и его коллегами был выбран язык программирования Golang. Этот язык отличается целым набором преимуществ над другими инструментами: высокая производительность, мощность, скорость, простота, поддержка многопользовательской работы. Всё это сделало Коробку ещё более удобной для развёртывания и масштабирования.,Коробка — настоящий прорыв в области отечественных разработок. Технология отвечает всем запросам и требованиям российских реалий и норм, что очень важно и перспективно для развития и популярности на локальном рынке.,В настоящее время Коробка находится на этапе тестирования, но скоро станет доступна всем желающим.,Благодарим Вас за прочтение!"
Слайд-шоу изображений — это скучно. Давайте создадим кубики,"Вы когда-нибудь задумывались о создании куба изображений?🤭 Да, я не задумывался, пока однажды, просматривая веб-сайт, не наткнулся на это объявление:,Это объявление я видел не впервые, но в тот день оно привлекло мое внимание. Как ни странно, в то время я работал над проектом, где мне нужно было реализовать слайд-шоу изображений в лайтбоксе, и я подумал про себя, как было бы здорово, чтобы изображения отображались в форме куба, как это, а не обычные слайд-шоу, к которым мы привыкли? Я не совсем был уверен, как это реализовать, но после нескольких часов проб и ошибок я в конце концов пришел к следующему😁:,Я называю это Куб-Шоу🤭. Вы можете проверить это на живом сайте,Самой сложной частью этого проекта было точное определение времени вращения куба для обновления изображений на каждой стороне куба и сохранение стабильности вращения куба при вращении куба вперед или назад.,Интересно, как мне удалось это реализовать? Что ж, тогда давайте узнаем. Чтобы начать, нам просто нужно создать три файла: HTML, CSS и JS.,Первое, что нам нужно сделать, это объявить структуру куба в HTML-файле.,В приведенном выше коде мы объявили контейнер div; внутри этого div у нас есть 3 элемента: левый значок для поворота куба назад, еще один элемент div для куба и правый значок для поворота куба вперед. Внутри div куба у нас есть еще 4 div для сторон куба, и в каждом из них есть тег изображения для отображения изображений.,Это все, что нам нужно в нашем HTML-файле. Настоящая работа еще впереди😬. Далее давайте стилизуем элементы.,Внутри нашего CSS-файла нам сначала нужно объявить общие стили страницы следующим образом:,Далее мы зададим стиль для контейнера , и значков «Назад» и «Вперед».,Двигаясь дальше, давайте настроим сам куб, а также анимацию вперед и назад, которую мы применим к кубу для его вращения влево или вправо.,Теперь давайте стилизуем четыре стороны куба вместе с тегами , в них.,Это очень важный шаг в достижении кубического эффекта. Нам нужно рассчитать угол поворота и перемещения каждой стороны куба в соответствии с шириной самого куба. Это также гарантирует, что стороны не станут больше или меньше куба при просмотре на экранах разных размеров.,Это оболочка для нашего CSS-файла. Теперь у нас есть красивый вращающийся куб со статичными изображениями. Теперь давайте перейдем к нашему файлу JavaScript, чтобы добавить в куб функциональность и динамический просмотр изображений.,Чтобы начать работу с нашим JS-файлом, нам сначала нужно получить все элементы HTML, с которыми мы будем работать, объявить массив, содержащий источник изображений, с помощью которых мы будем обновлять куб. и объявим несколько переменных, которые мы будем использовать по мере продвижения вперед.,Далее мы создадим две функции для последовательного обновления изображений на каждой стороне куба каждые 7,6 секунды. Мы рассчитываем продолжительность интервала, разделив продолжительность CSS-анимации на 4, гарантируя, что все стороны будут обновлены до завершения анимации.,После этого нам нужно прикрепить только что созданные функции к кнопкам со стрелками влево и вправо соответственно и установить стиль анимации куба на поворот влево или вправо.,Теперь мы хотим иметь возможность приостанавливать вращение куба, чтобы пользователь мог дольше просматривать фотографию. Для этого мы прикрепляем к кубу событие , и проверяем, запущена ли уже анимация. Если да, то приостанавливаем его, а если не работает, возобновляем вращение куба.,И благодаря этому, дамы и господа, нам удалось создать потрясающее имиджевое куб-шоу🤭. Ознакомьтесь с полным , на GitHub.,Дайте мне знать, что вы, ребята, думаете. Обратная связь очень приветствуется🤗✨. Пожалуйста, не стесняйтесь задавать мне любые вопросы или высказывать замечания. А пока удачного кодирования, ребята!✨✌"
Получение данных с помощью Axios,"Получение данных остается одной из наиболее важных частей каждого приложения. Времена, когда простая целевая страница со статической информацией могла привлечь потенциальных клиентов, прошли. В настоящее время современные приложения ориентированы исключительно на обмен данными между клиентом и сервером.,В этой статье описан подход к созданию масштабируемого и простого в обслуживании решения для извлечения данных. Включив в проект механизмы кэширования данных, перехватчики и менеджер состояний, вы можете повысить его эффективность.,Чтобы настроить Axios, мы вызываем модуль , и применяем метод ,. В настоящее время мы предоставляем только два параметра: , (основной путь к серверу) и , по умолчанию для клиента.,Обратите внимание, что функция , является выражением функции, вызываемым немедленно, то есть она вызывается сразу после определения. Крайне важно создавать экземпляр запроса axios только один раз, когда загружается модуль ,. Это соответствует шаблону Singleton, обычно используемому в JavaScript.  ,В запросе у нас есть две разные функции: , и ,. Каждая из них возвращает axios экземпляр  Response/Error. Используя структуру обещания, мы вызываем ,, когда запрос успешен, и ,, когда запрос не удался. Этот подход дает два весомых преимущества:,Перехватчик запросов:,Прежде чем клиент отправит запрос на сервер, его можно изменить. В следующем примере мы получаем , из , и устанавливаем его в глобальной конфигурации, которую получаем в качестве параметра для нашей функции. После добавления токена , мы возвращаем измененный конфиг. Этот шаг необходим, поскольку если это ограниченный пользовательский интерфейс (панель управления, админ-панели и т. д.), все запросы требуют авторизации. Дополнительно отметим, что в случае ошибки мы можем вернуть , с произошедшей ошибкой.,Перехватчик ответов:,Во втором перехватчике мы уже модифицируем полученные от сервера данные. Если сервер отвечает правильно, мы просто возвращаем ответ. Однако если возникает ошибка, мы предпринимаем конкретные действия. Во-первых, нам необходимо идентифицировать ошибку, отправленную сервером, обычно это делается путем проверки стандартизированных статусов. В следующем коде мы проверяем статус, чтобы определить соответствующее действие. Если это ошибка ,, мы обновляем токены с помощью ,, срок действия которого более длительный. При ошибке , мы выдаем ,. Это пример того, как мы можем глобально обрабатывать каждый запрос. Имейте в виду, что в зависимости от спецификаций вашего проекта вы можете обрабатывать ошибки любым желаемым способом. Если ваш сервер отправляет определенные ошибки, вы можете обрабатывать их на основе других параметров.,На данный момент мы узнали, как настроить конфигурацию Axios, чтобы ее можно было легко изменять, настраивать и масштабировать. Заключительная часть конфигурации Axios будет примером того, как структурировать и использовать настроенный запрос.,Это базовая структура нашего файла ,. Он сохраняет конечные точки как константы в форме пар ключ-значение. Значение представляет собой функцию, позволяющую нам легко управлять ими и вызывать их, предоставляя при необходимости необходимые параметры.,Давайте посмотрим на служебный файл. Мы группируем вызовы API по бизнес-доменам в класс, в нашем случае все они связаны с продуктами. Каждый метод вызывает определенную конечную точку, используя функцию из файла конфигурации в качестве URL-адреса. При отправке параметров запроса мы предоставляем их как параметры, чтобы избежать отправки неправильных строк с пустыми параметрами.,Мы выполнили первоначальную настройку Axios, настроили перехватчики и установили структуру папок для вызовов API."
"Изучите Flutter, создав свое первое приложение Flutter!","В этой статье я собираюсь познакомить вас с вашим первым приложением Flutter. Мы рассмотрим части проекта Flutter, их роли и рассмотрим некоторые фундаментальные концепции состояния, включая различия между , и ,.,Если вы еще не установили Flutter, вот несколько пошаговых видеороликов, которые проведут вас через процесс установки Flutter на ,, , и ,.,Начнем с создания базового приложения. Вы можете сделать это из меню вашего любимого редактора кода, хотя я всегда предпочитаю делать это из терминала:,Эта команда создаст базовое приложение для подсчета, которое при выполнении позволит нам увеличивать числовое значение, нажав кнопку:,Цель этого примера кода — дать вам первое представление о Flutter. Мы будем постепенно идти к пониманию этого шаблона, который нам уже дан.,Первое, что мы собираемся рассмотреть, это файл ,:,Этот файл содержит основные метаданные приложения, перечисляет все зависимости и включает различные параметры конфигурации. Если вы откроете его, вы найдете комментарии к каждому разделу, объясняющие их назначение. Однако для ясности мы удалим эти комментарии, чтобы файл был простым и кратким обзором каждого сегмента:,Разъясним значение каждого параметра:,Следующая часть посвящена зависимостям приложения, которые делятся на два типа: включенные в окончательный пакет приложения (зависимости) и те, которые используются во время разработки, но не включены в окончательный пакет приложения (,). Чтобы понять это различие, давайте рассмотрим в качестве примера пакет ,. Этот пакет помогает в статическом анализе кода, который выполняется локально на вашем компьютере. Нет необходимости, чтобы он был частью окончательного пакета приложения, распространяемого среди пользователей.,Чтобы найти новые пакеты, разработчики Flutter часто посещают ,. Предположим, вы хотите выполнить сетевой запрос к удаленному серверу с помощью ,-пакета. Вы можете просто добавить его в свои зависимости, а затем выполнить ,, чтобы получить пакет и подготовить его к использованию.,Альтернативно вы можете использовать команду ,, чтобы не только загрузить, но и автоматически добавить пакет , в ваши зависимости. Чтобы добавить пакет в ,, вы должны использовать ,.,Экспериментирование с этими методами может помочь вам определить наиболее удобный способ управления пакетами в вашем приложении Flutter.,В конце файла есть раздел с надписью "","", в котором указана настройка ,. Этот конкретный параметр сообщает Flutter, что наше приложение будет использовать стиль ,, предоставляя набор рекомендаций по визуальному дизайну, взаимодействию и анимационному дизайну, разработанный Google.,По мере того, как вы углубляетесь в разработку Flutter, вы столкнетесь с рядом дополнительных конфигураций, которые можно применить в этом файле для дальнейшей персонализации тем и других аспектов вашего приложения.,Кроме того, стоит упомянуть файл ,, важнейший компонент проектов Flutter. Этот файл автоматически создается Flutter, когда вы запускаете такие команды, как , или ,. Его основная цель — записать точные версии каждой зависимости, используемой в вашем проекте, на момент выполнения этих команд. Это гарантирует, что ваш проект останется согласованным и стабильным, даже если зависимости будут обновлены в будущем. Отслеживая эти версии, файл , помогает предотвратить проблему «он работает на моей машине», гарантируя, что каждый разработчик, работающий над проектом, использует одни и те же версии зависимостей, что сводит к минимуму конфликты и проблемы совместимости.,Внутри проекта Flutter, помимо файлов , и ,, вы увидите несколько каталогов, названных в честь платформ. Эти каталоги: ,, ,, ,, , и ,. Это не просто папки; это полноценные собственные проекты для соответствующих платформ.,Сильная сторона Flutter заключается в его способности предоставлять многоплатформенную среду разработки, скрывая сложности деталей реализации для конкретной платформы. Тем не менее, существование этих проектов, ориентированных на конкретную платформу, имеет решающее значение для бесперебойной работы Flutter в различных средах.,Бывают случаи, когда вам нужно погрузиться в нативную разработку в этих каталогах. Часто это тот случай, когда определенная функциональность может быть достигнута только с помощью кода, специфичного для платформы. Именно в таких сценариях становятся необходимыми изменения в исходных частях проекта.,Важно отметить, что вам не обязательно поддерживать все эти каталоги, если ваше приложение не предназначено для всех поддерживаемых платформ. Например, если вы сосредоточены исключительно на , и ,, вы можете безопасно удалить каталоги ,, , и ,.,И наоборот, если вы решите расширить доступность вашего приложения для дополнительных платформ, изначально не включенных в ваш проект, Flutter упростит это расширение. Используя команду , с опцией ,, вы можете добавить необходимые проекты платформы. Например, если вы начинаете с проекта, поддерживающего только , и ,, а позже решите включить поддержку ,, , и ,, вы можете выполнить ,, ,, ,. Эта команда создает необходимые каталоги для новых поддерживаемых платформ.,Мы уже видели основные файлы и каталоги проекта Flutter, хотя я, правда, не перечислил их все, а сейчас описал наиболее важные из них, о которых вам следует знать с самого начала. Теперь давайте перейдем в каталог ,, место, где находится весь код Dart, составляющий ваше приложение.,Когда вы создаете новый проект, Flutter автоматически создает файл , в папке ,. Этот файл содержит исходный код, отвечающий за приложение-счетчик, которое вы увидите, если запустите проект. Если вы войдете, вы увидите комментарии, объясняющие каждый раздел. Как и раньше, мы собираемся исключить эти комментарии и постепенно объясним каждую часть:,Первая строка представляет импорт ,. Этот импорт важен, поскольку по умолчанию мы используем виджеты Material для создания пользовательского интерфейса.,После этого мы встречаем метод ,. Каждому приложению ,, включая Flutter, требуется точка входа, которая предоставляется функцией ,. Внутри этой функции мы вызываем ,, позволяя приложению запуститься. Мы передаем ему экземпляр ,, который является следующим виджетом, который мы встретим в файле:,В этом фрагменте представлен виджет MyApp, который служит основным элементом вашего приложения. Он находится на вершине иерархии виджетов и по сути действует как корень, от которого будут разветвляться все остальные виджеты. Приложения Flutter структурированы как обширное дерево виджетов, где каждый виджет может быть родительским или дочерним для других. Здесь , выступает в качестве начального узла в этой взаимосвязанной структуре., определяется как класс, расширяющий ,. , характеризуются отсутствием внутреннего состояния — они не управляют данными, которые изменяются с течением времени. Следовательно, , не перестраивается в ответ на изменения внутренних данных. Более подробная информация об этом будет предоставлена ​​по мере нашего продвижения.,Каждый , должен реализовать метод ,. В этом методе создается пользовательский интерфейс приложения. В этом примере мы создаем виджет , внутри этого метода. , облегчает разработку приложения в соответствии с рекомендациями ,, включая такие аспекты, как название и тема приложения.,Атрибут , определяет виджет, который будет отображаться при запуске приложения. Здесь для него установлено значение , — виджет, который идет следующим в файле:, — это виджет, похожий на ,, но он наследуется от ,, а не от ,. Это различие вводит два связанных класса: сам ,, который настраивает виджет, и ,, класс, который управляет состоянием виджета, расширяя State.,В классе состояния мы обязаны снова реализовать метод , ,. Однако на этот раз это происходит внутри класса состояния, где мы определяем дерево виджетов, составляющее интерфейс счетчика:,Теперь, когда мы примерно увидели все, что есть в файле ,, давайте по-простому поймем, как Flutter управляет состоянием.,Как я уже говорил, класс , отвечает за управление состоянием виджета ,. В данном случае у нас есть приложение с числовым значением, которое увеличивается при нажатии кнопки. Это государство. В частности, переменная, определенная в начале класса:,Когда мы вызываем метод ,, он вызывает метод ,, и внутри него увеличивается значение переменной ,. Вызывая метод ,, мы обновляем состояние, сообщая ,, что оно изменилось, и заставляем метод сборки запускаться снова, но на этот раз с обновленным состоянием. Позже во втором виджете типа , считывается переменная , для отображения значения на экране.,Это очень упрощенное объяснение управления состоянием во ,. Давайте проведем эксперимент и добавим следующую строку непосредственно перед тем, как сборка вернет ,:,Теперь снова запустите приложение и посмотрите журнал вывода. Вы увидите напечатанную строку «Обновление состояния» при запуске приложения, а также при изменении значения счетчика.,Как видите, это самый простой способ управлять состоянием вашего приложения во Flutter. Кроме того, вы также смогли увидеть роль метода сборки и его важность при составлении интерфейса на основе изменений состояния.,Если это ваш первый контакт с Flutter, возможно, на данный момент вы немного перенасыщены таким большим количеством информации, не волнуйтесь, я перечислю ключевые моменты, которые мы увидели на протяжении всей статьи.,В целом это основные базовые моменты, которые вам следует знать, если вы начинаете разрабатывать приложения с помощью ,.,Надеюсь, эта статья была для вас полезна. Не стесняйтесь следить за этим блогом и моим каналом на YouTube, если вы хотите продолжить изучение разработки приложений с помощью ,, а также быть в курсе новостей и других интересных тем, связанных с этой великолепной средой.,Спасибо, что дочитали до этого места, удачного кодирования!"
MongoDB против Snowflake: всестороннее сравнение,"В постоянно развивающемся мире управления данными появились два выдающихся игрока: MongoDB, популярная база данных документов NoSQL, и Snowflake, облачное решение для хранения данных. Обе технологии привлекли значительное внимание благодаря своим уникальным подходам к хранению и обработке данных.,В этом блоге мы углубимся в ключевые различия между MongoDB и Snowflake, изучим их сильные стороны, варианты использования и потенциальные пути миграции.,MongoDB — это гибкая и масштабируемая база данных NoSQL, которая хранит данные в формате документа, похожем на JSON. Он предназначен для простой обработки неструктурированных и полуструктурированных данных, что делает его популярным выбором для современных приложений, требующих гибкости и быстрых циклов разработки. Документно-ориентированный подход MongoDB позволяет динамически изменять схему и эффективно выполнять запросы к вложенным структурам данных.,Snowflake — это облачное хранилище данных, построенное на базе облачной инфраструктуры. Оно предоставляет SQL-совместимый механизм запросов, который позволяет пользователям хранить, обрабатывать и анализировать структурированные и полуструктурированные данные в любом масштабе. Уникальная архитектура Snowflake отделяет вычислительные ресурсы от хранилища, обеспечивая плавную масштабируемость и экономичную обработку данных.,Модель данных:,Язык запроса:,Масштабируемость:,Случаи использования:,Производительность:,Хотя MongoDB и Snowflake служат разным целям, могут возникнуть ситуации, когда организациям потребуется перенести данные из MongoDB в Snowflake для целей аналитики или хранения данных. Этот процесс миграции обычно включает извлечение данных из MongoDB, преобразование их в подходящий формат и загрузку в Snowflake. Могут использоваться различные инструменты и методы, такие как сбор измененных данных (CDC), конвейеры данных и процессы ETL (извлечение, преобразование, загрузка).,MongoDB и Snowflake — мощные инструменты управления данными, каждый из которых превосходен в своей области. MongoDB отлично подходит для сценариев, требующих гибких моделей данных и оперативной обработки данных в реальном времени, а Snowflake предназначен для крупномасштабных аналитических рабочих нагрузок и хранилищ данных. При рассмотрении вопроса о переходе с MongoDB на Snowflake решающее значение имеют тщательное планирование и выполнение для обеспечения плавного перехода и оптимального использования данных."
Новые версии Go,"Состоялся релиз новых версий языка программирования Golang — 1.21.10 и 1.22.3.  ,Отличительной чертой новых версий являются исправления в системе безопасности, согласно политике Go.,Ознакомьтесь с примечаниями к выпуску для получения дополнительной информации: ,.,Вы также можете загрузить двоичный дистрибутив и дистрибутивы с исходным кодом с веб-сайта Go: ,.,Для компиляции из исходного кода с использованием клона Git обновите версию с помощью git checkout go1.22.3 и выполните сборку в обычном режиме.,Благодарю за прочтение!"
"Обнаружена уязвимость в аппаратном обеспечении облачных серверов, используемых AMD и Intel","За последние несколько лет производители аппаратного оборудования разработали технологии, которые должны позволять компаниям и правительственным организациям безопасно обрабатывать конфиденциальные данные, используя общие ресурсы облачных вычислений.,Этот подход, известный как конфиденциальные вычисления, защищает конфиденциальные данные во время их обработки, изолируя их в области, недоступной для других пользователей и даже для провайдера облачных услуг. Программисты из ETH Zurich обнаружили, что хакеры могут получить доступ к этим системам и хранящимся в них данным из-за уязвимости в механизмах безопасности чипов AMD и Intel.,Для доказательства несовершенности систем безопасности чипов исследователи реализовали два сценария атаки, оба с использованием так называемого механизма прерываний, который временно нарушает регулярную обработку.,Исследование будет представлено на 45-м симпозиуме IEEE по безопасности и конфиденциальности 20–23 мая 2024 г. и на 33-м симпозиуме по безопасности USENIX 14–16 августа 2024г.,В основе конфиденциальных вычислений лежит доверенная среда выполнения, TEE. TEE — это аппаратный компонент, который изолирует приложения во время их работы. Доступ к памяти приложения в этом случае возможен только с помощью авторизованного кода.,Это означает, что данные также защищены от несанкционированного доступа, пока они хранятся в незашифрованном виде в оперативной памяти во время обработки. Раньше единственным способом обеспечить такую ​​защиту было шифрование данных при хранении на жестком диске и во время передачи.,В общедоступном облаке приложения изолируются с помощью TEE, в частности от так называемого гипервизора. Поставщики облачных услуг используют программное обеспечение гипервизора для управления ресурсами, начиная от аппаратных компонентов и заканчивая виртуальными серверами своих клиентов. Гипервизоры являются важной частью облачных сервисов, поскольку они обеспечивают необходимую гибкость, эффективность и безопасность. Но административные функции, выполняемые гипервизорами, также являются фактором нестабильности, поскольку они создают подверженность разнообразным атакам.,При определенных условиях с помощью этих атак может быть получен доступ к данным, хранящимся в памяти других активных пользователей облака, работающих на том же оборудовании. Более того, поставщики облачных услуг также могут использовать гипервизоры, чтобы самостоятельно просматривать данные своих пользователей. Оба этих риска неприемлемы для компаний и государственных организаций, обрабатывающих конфиденциальные данные.,Несмотря на все недостатки, перечисленные выше, полная изоляция пользовательской системы от гипервизора невозможна, поскольку гипервизор должен выполнять свои основные функции, такие как распределение облачных ресурсов и управление виртуальным сервером, на котором функционирует защищенная система в облаке.,Отправляя скоординированные прерывания, учёным ETH удалось настолько эффективно запутать систему, защищенную TEE, что они смогли получить root-доступ — другими словами, получить полный контроль. «Больше всего эта проблема затронула конфиденциальные вычисления AMD, которые оказались уязвимыми для атак с использованием нескольких различных прерываний. В случае с Intel только один тип прерываний спровоцировал утечку данных», ,— сообщает Швета Шинде, профессор компьютерных наук в ETH Zurich.,Второй сценарий атаки оказался губительным только для оборудования AMD. В алгоритме использовался механизм, введенный производителем чипа для упрощения связи между TEE и гипервизором, несмотря на изоляцию. В этом случае специальное прерывание может привести к тому, что защищенная система разгласит конфиденциальные данные и даже запустит внешние программы.,Для Шинде и её исследовательской группы обнаружение уязвимостей в облачном хранилище данных является побочным результатом их работы по обеспечению пользовательского контроля над данными на устройствах iPhone и Android.,Специально разработанный TEE не только защищает данные от операционных систем производителей, но также предоставляет возможность независимой работы для приложений, не связанных с Apple или Google, согласно заявлению Шинде."
Как создать адаптивный фон для видео в HTML и CSS,"В настоящее время привлечение внимания людей очень важно для веб-сайтов, и один из замечательных способов добиться этого — использовать фоновое видео позади некоторого контента на вашем сайте. Но сделать так, чтобы эти видео выглядели идеально на экране любого размера, может быть непросто.,К счастью, с помощью некоторых хитростей HTML и CSS вы можете создать видеофон, который отлично работает независимо от того, насколько велик или мал экран.,В этой статье я шаг за шагом объясню, как создать этот суперкрутой фоновый эффект для видео. Так оставайся со мной!,Чтобы начать работу над нашим шедевром адаптивного видео, нам понадобится несколько ключевых вещей.,Во-первых, редактор кода — подойдет что угодно, от простого Блокнота до модных штанов Adobe Dreamweaver. Если он позволяет вам писать HTML и CSS, вы молодец.,Далее, современный веб-браузер,такой как Chrome, Firefox, Safari и т. д., для просмотра нашей работы.,И, наконец, самое главное — видеофайл, который можно использовать в качестве полноэкранного фона. Формат MP4, как правило, является безопасным выбором, поскольку он хорошо работает с большинством браузеров.,Имея в своем наборе эти базовые инструменты, мы готовы приступить к написанию кода! Процесс не слишком сложен, поэтому следуйте инструкциям.,Хорошо, давайте начнем с HTML для нашего адаптивного видео-фона.,Мы начнем с создания элемента ,, который будет содержать как само видео, так и видимый контент страницы. Дайте этому , имя класса, например ,, чтобы мы могли позже легко стилизовать его в CSS:,Затем поместите элемент , внутрь этого контейнера. В конечном итоге этот тег содержит видеофайл, но сначала нам нужно настроить несколько атрибутов:,Для нашего реального видеофайла мы будем использовать , внутри , тегов:,Здесь , указывает на путь к нашему видеофайлу и , дает браузеру понять, что он ожидает формат видео MP4.,Наконец, нашему контейнеру , нужно место для текста, накладывающего фон видео:,Оформив эти элементы в HTML, мы заложили основу для того, чтобы сделать наше видео адаптивным фоном!,У нас есть готовый HTML. Теперь давайте сделаем немного CSS-магии!,Сначала мы поработаем над этим классом ,. Мы хотим, чтобы видео действовало как фон, но чтобы избежать ненужного пространства, мы должны сделать некоторые настройки по умолчанию в нашем CSS-файле:,Теперь давайте расположим контейнер относительно, потому что мы абсолютно разместим видео внутри:,Далее, чтобы видеоконтейнер заполнял весь экран, установите ширину и высоту , и ,:, (высота области просмотра) и , (ширина области просмотра) в основном означают, что они покрывают 100% видимой высоты и ширины экрана.,Давайте также добавим , для обрезки всего, что выливается наружу:,Контейнер готов! Сначала мы абсолютно позиционируем , относительно родительского элемента:,Теперь установите ширину и высоту на ,. Это учитывает соотношение сторон видео при заполнении пространства:,Наконец, давайте добавим , и ,, чтобы оно растягивало видео, чтобы заполнить его родительский контейнер, сохраняя при этом соотношение сторон:,Если вы следили за этим, ваше фоновое видео должно выглядеть примерно так:,Да, я знаю, что оно еще не идеально отцентрировано, но мы исправим это на шаге 3!,Сначала используйте верхнюю и левую позиции на 50%, чтобы сместить мертвую точку точки позиционирования:,Теперь вы заметите, что фоновое видео стало меньше и сместилось в правый нижний угол:,Чтобы исправить это, используйте свойство ,:,Наконец, установите , для управления порядком наложения по сравнению с другими элементами:,Этот низкий z-индекс, равный -1, будет отодвигать наше видео позади всего, позволяя нашему основному контенту выглядеть как «Some Text».,Вот результат:,Вы можете видеть, что наше фоновое видео идеально центрировано, заполняет весь экран и отзывчиво. Но мы еще не совсем закончили. Нам все еще нужно обработать стиль текста заголовка «Some Text».,Сейчас это просто элемент ,, лениво размещенный поверх видео. Чтобы этот контент действительно привлекал внимание и дополнял наш великолепный видео-фон, нам нужно сейчас оформить текст.,Мы начнем с центрирования контента по горизонтали и вертикали над видео с помощью ,.,Теперь добавьте это в свой ,:,Помните, в нашем html-файле мы указали , родительский контейнер для ,.,Теперь давайте оформим его с чистым фоном позади текста:,Значение , дает полупрозрачный белый цвет, поэтому видео немного просвечивает. , и , добавляют хороший интервал и закругленные углы.,Чтобы стилизовать сам текст, выберите , (или любой другой элемент, который вы использовали):,Мы увеличили размер шрифта, добавили жирный шрифт и придали ему темно-серый цвет текста.,Вот и все! Теперь контент должен центрироваться по вертикали и горизонтали поверх полноэкранного видео с гладким полупрозрачным фоном.,И вот оно — все, что вам нужно знать о реализации бесшовного, адаптивного видеофона с помощью HTML и CSS!,Мы начали с создания правильной структуры HTML — контейнера ,, в котором находится наш видеоэлемент, и наложения контента. Затем нужно было стилизовать это видео так, чтобы оно вело себя как полноэкранное изображение с соблюдением пропорций фона, за счет умного позиционирования и некоторых хитростей с преобразованием.,После этого мы сосредоточили внимание на содержимом наложения, центрируя его по вертикали и горизонтали с помощью flexbox. Слегка прозрачный фон помог тексту выделиться на фоне движущегося видео.,Эта техника полностью адаптивна «из коробки». Измените размер контейнера, переверните его на мобильное устройство, перейдите в полноэкранный режим — видеофон легко адаптируется, сохраняя при этом четкое качество."
"Яндекс проведёт фестиваль Young Con — для тех, кто хочет начать карьеру в IT","Яндекс предлагает студентам и молодым специалистам бесплатное участие в фестивале Young Con, который проходит 27 июня в Live Arena. На фестивале можно узнать о технологиях Яндекса, пройти пробное собеседование для начинающих разработчиков, аналитиков и тестировщиков. Тема фестиваля - ""Вселенная Яндекса"". Будут выступать HR-директор Яндекса Даша Золотухина, технический директор Поиска Алексей Гусаков и глава ecom-сервисов Роман Маресов.,На фестивале будут представлены девять ""миров"" - стендов с интерактивными развлечениями, где гости смогут узнать о технологиях Яндекса и пообщаться с их создателями. Необходимо оставить заявку на сайте для личного участия или пройти онлайн-регистрацию. В конце фестиваля выступят группы The Hatters и ХЛЕБ.,Также будет проведен турнир по программированию ""Баттл вузов. Кубок Y& & Y"" среди студентов, победившая команда получит 1 млн рублей.,Программу фестиваля и форму регистрации можно найти на сайте ,. Иллюстрации доступны на ,."
